require('dotenv').config();
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const path = require('path');
const cookieParser = require('cookie-parser');
const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');
const multer = require('multer');
const fs = require('fs').promises;
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { body, validationResult } = require('express-validator');
const nodemailer = require('nodemailer');
const math = require('mathjs');

console.log('üöÄ Kh·ªüi ƒë·ªông h·ªá th·ªëng WebGIS Climate Smart City...');

// Express app
const app = express();

// S·ª≠a: Th√™m trust proxy cho Vercel
app.set('trust proxy', 1);

// üö´ Kh√¥ng d√πng Redis
console.warn("‚ö†Ô∏è Redis ƒë√£ ƒë∆∞·ª£c t·∫Øt, h·ªá th·ªëng ch·ªâ s·ª≠ d·ª•ng PostgreSQL.");

// ==== View Engine ====
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// ==== Security Headers ====
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        connectSrc: ["'self'", "https://cdn.jsdelivr.net", "https://unpkg.com"],
        styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com"],
        scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://unpkg.com"],
        imgSrc: ["'self'", "data:", "https://*"],
        fontSrc: ["'self'", "https://cdnjs.cloudflare.com"],
      },
    },
  })
);

// ==== CORS ====
app.use(
  cors({
    origin: process.env.NODE_ENV === 'production' ? process.env.APP_URL : true,
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  })
);

// ==== Rate Limit ====
const windowMs = parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000;
const maxRequests = parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100;

app.use(
  rateLimit({
    windowMs,
    max: maxRequests,
    keyGenerator: (req) => req.ip,
    message: {
      error: 'Qu√° nhi·ªÅu y√™u c·∫ßu t·ª´ IP n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.',
      retryAfter: Math.ceil(windowMs / 1000),
    },
    handler: (req, res) => {
      res.status(429).json({
        error: 'V∆∞·ª£t qu√° gi·ªõi h·∫°n y√™u c·∫ßu',
        retryAfter: Math.ceil(windowMs / 1000),
      });
    },
  })
);

// ==== Body Parser & Cookies ====
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cookieParser(process.env.SESSION_SECRET));

// ==== Static Files ====
app.use(
  express.static(path.join(__dirname, 'public'), {
    maxAge: '1d',
    etag: true,
  })
);

// ==== Uploads Directory ====
const uploadDir = process.env.UPLOAD_DIR || '/tmp/uploads';
(async () => {
  try {
    await fs.mkdir(uploadDir, { recursive: true });
    console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c uploads: ${uploadDir}`);
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c uploads:', err);
  }
})();

const upload = multer({
  dest: uploadDir,
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/pdf') cb(null, true);
    else cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file PDF!'), false);
  },
  limits: { fileSize: 10 * 1024 * 1024 },
});

// ==== PostgreSQL (Neon) ====
const { Pool } = require('pg');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

pool
  .query('SELECT NOW()')
  .then(() => console.log('‚úÖ Connected to Neon PostgreSQL'))
  .catch((err) => {
    console.error('‚ùå PostgreSQL connection error:', { message: err.message, code: err.code });
    process.exit(1);
  });

// ==== Constraints ====
async function ensureConstraints() {
  try {
    await pool.query(`
      ALTER TABLE Assessments_Template
      ADD CONSTRAINT unique_city_year_indicator UNIQUE (city, year, indicator_code);
    `);
    console.log('‚úÖ ƒê√£ th√™m r√†ng bu·ªôc unique cho Assessments_Template');
  } catch (err) {
    if (err.code !== '42710') {
      console.error('‚ùå L·ªói khi th√™m r√†ng bu·ªôc unique:', err.message);
    } else {
      console.log('‚úÖ R√†ng bu·ªôc unique ƒë√£ t·ªìn t·∫°i cho Assessments_Template');
    }
  }
}

// ==== Parse Range ====
function parseRange(criteria) {
  try {
    if (!criteria || criteria === '0') return { min_value: null, max_value: null };

    const cleanCriteria = criteria.trim().replace(/%/g, '').replace(/m¬≤\/ng∆∞·ªùi/g, '');

    if (!cleanCriteria.match(/[\d<=>-]/)) return { min_value: null, max_value: null };

    if (cleanCriteria.startsWith('<')) {
      const max = parseFloat(cleanCriteria.replace('<', ''));
      return { min_value: null, max_value: max };
    } else if (cleanCriteria.startsWith('‚â•') || cleanCriteria.startsWith('>=')) {
      const min = parseFloat(cleanCriteria.replace('‚â•', '').replace('>=', ''));
      return { min_value: min, max_value: null };
    } else if (cleanCriteria.includes('-')) {
      const [min, max] = cleanCriteria.split('-').map((s) => s.trim());
      let minVal = min.includes('>') ? parseFloat(min.replace('>', '')) : parseFloat(min);
      let maxVal = max.includes('<') ? parseFloat(max.replace('<', '')) : parseFloat(max);
      return { min_value: minVal, max_value: maxVal };
    } else {
      const value = parseFloat(cleanCriteria);
      if (!isNaN(value)) return { min_value: value, max_value: value };
      return { min_value: null, max_value: null };
    }
  } catch (err) {
    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ parse ph·∫°m vi t·ª´ "${criteria}": ${err.message}`);
    return { min_value: null, max_value: null };
  }
}

// S·ª≠a: Ch·ªâ d√πng PostgreSQL, kh√¥ng d√πng Redis
async function getCachedOrQuery(key, query) {
  try {
    const result = await pool.query(query);
    console.log(`‚úÖ L·∫•y d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ PostgreSQL cho key: ${key}`);
    return result.rows;
  } catch (err) {
    console.error(`‚ùå L·ªói khi query PostgreSQL cho key ${key}:`, err.message);
    return [];
  }
}

// Middleware x√°c th·ª±c token
function authenticateToken(req, res, next) {
  const token = req.cookies.token;
  if (!token) return res.redirect('/?error=Vui l√≤ng ƒëƒÉng nh·∫≠p');
  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);
    req.user = user;
    next();
  } catch (err) {
    console.error('L·ªói x√°c th·ª±c token:', err);
    res.clearCookie('token');
    res.redirect('/?error=Token kh√¥ng h·ª£p l·ªá');
  }
}

// Middleware ki·ªÉm tra vai tr√≤
function checkRole(role) {
  return (req, res, next) => {
    if (req.user && req.user.role === role) {
      next();
    } else {
      res.redirect('/?error=Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
    }
  };
}

// ƒê·ªãnh nghƒ©a c√¥ng th·ª©c c·ª©ng cho t·ª´ng ch·ªâ s·ªë
const formulas = {
  'ENI_RWE': (params) => ((params.E_RE - params['L_AT&C']) / params.EC * 100 + params.P_RE / params.P_total * 100) || 0,
  'SENIRE': (params) => (params.SE_RE / params.ES * 100) || 0,
  'EI_Save': (params) => (params.E_Save / params.E_C * 100) || 0,
  'EI_LR': (params) => (params.E_delivered / params.E_input * 100) || 0,
  'SLI': (params) => ((params.SL_e + params.SL_s) / params.SL * 100) || 0,
  'GBpromo': (params) => parseFloat(params.GBpromo) || 0,
  'VNGBI': (params) => ((params.B_P + params.B_AC) / (params.S_GB / params.S_BC) * 100) || 0,
  'R_CO2e': (params) => ((params.CO2eb - params.CO2et) / params.CO2eb * 100) || 0,
  'R_S_water': (params) => ((params.S_water_present + params.S_op_present) / (params.S_water_plan + params.S_op_plan) * 100) || 0,
  'Rcover': (params) => ((params.S_pp / params.P) / 12 * 100) || 0,
  'Rland_p': (params) => (params.S_land_p / params.S_total_land * 100) || 0,
  'UBI_PNRA': (params) => ((params.A_natural + params.A_restored) / params.A_city * 100) || 0,
  'GISapp': (params) => parseFloat(params.GISapp) || 0,
  'DISaster': (params) => parseFloat(params.DISaster) || 0,
  'ClimateAct': (params) => parseFloat(params.ClimateAct) || 0,
  'NMT': (params) => (params.NMT_L / params.L_R * 100) || 0,
  'PT_c': (params) => (params.PT_c / params.PT * 100) || 0,
  'PT1000': (params) => (params.PT_F * 1000 / params.P) || 0,
  'STL': (params) => (params.STL_S / params.TL * 100) || 0,
  'SRRW': (params) => (params.SRRW_L / params.TSR * 100) || 0,
  'RoadCap': (params) => parseFloat(params.RoadCap) || 0,
  'AQstation': (params) => (params.AQstation / params.A_city) || 0,
  'AQdata': (params) => parseFloat(params.AQdata) || 0,
  'CleanAirPlan': (params) => parseFloat(params.CleanAirPlan) || 0,
  'AQI_TDE': (params) => parseFloat(params.AQI_exceed_days) || 0,
  'WImanage': (params) => parseFloat(params.WImanage) || 0,
  'WI_loss': (params) => ((params.W_P - params.W_S) / params.W_P * 100) || 0,
  'WI_rr': (params) => (params.W_rr / params.W_s * 100) || 0,
  'FloodRisk': (params) => parseFloat(params.FloodRisk) || 0,
  'Ewater': (params) => parseFloat(params.Ewater) || 0,
  'Ewwater': (params) => parseFloat(params.Ewwater) || 0,
  'DigWater': (params) => parseFloat(params.DigWater) || 0,
  'R_USWA': (params) => (params.P_W / params.P_S * 100) || 0,
  'WasteInit': (params) => parseFloat(params.Waste_Init) || 0,
  'R_USWA_waste': (params) => (params.W_landfill / params.W_waste_generate * 100) || 0,
  'RRWI': (params) => ((params.W_RU + params.W_RRC) / params.W_G * 100) || 0,
  'ConsWaste': (params) => ((params.W_Cons_deli_cp + params.W_Cons_rr + params.W_Cons_deli_reduce) / params.W_Cons * 100) || 0,
  'WWT_I': (params) => (params.W_T / params.W_G * 100) || 0,
  'DigWaste': (params) => parseFloat(params.DigWaste) || 0,
  'LandfillEff': (params) => parseFloat(params.LandfillEff) || 0,
  'GHGIs': (params) => (parseFloat(params.GHGs_Landfill) || 0) + (parseFloat(params.GHGs_WTE) || 0) + (parseFloat(params.GHGs_Recycling) || 0) + (parseFloat(params.GHGs_Composting) || 0)
};

// Route POST /cndl
app.post(
  '/cndl',
  authenticateToken,
  checkRole('admin'),
  [
    body('year').isInt({ min: 2000, max: 2100 }).withMessage('NƒÉm ph·∫£i t·ª´ 2000 ƒë·∫øn 2100'),
    body('*.params.*')
      .optional()
      .trim()
      .customSanitizer(value => value.replace(',', '.').replace(/[^\d.]/g, ''))
      .matches(/^\d+(\.\d*)?$/)
      .withMessage('Tham s·ªë b·ªï sung ph·∫£i l√† s·ªë d∆∞∆°ng')
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('L·ªói validation:', errors.array());
      return res.redirect(`/cndl?error=${encodeURIComponent(errors.array()[0].msg)}`);
    }

    try {
      const year = req.body.year || new Date().getFullYear();
      const city = req.body.city || 'TP. H·ªì Ch√≠ Minh';
      const assessor = req.user.username;
      const ip = req.ip;
      const userAgent = req.get('User-Agent');

      const indicatorCodes = [
        'ENI_RWE', 'SENIRE', 'EI_Save', 'EI_LR', 'SLI', 'GBpromo', 'VNGBI', 'R_CO2e',
        'R_S_water', 'Rcover', 'Rland_p', 'UBI_PNRA', 'GISapp', 'DISaster', 'ClimateAct',
        'NMT', 'PT_c', 'PT1000', 'STL', 'SRRW', 'RoadCap', 'AQstation', 'AQdata', 'CleanAirPlan', 'AQI_TDE',
        'WImanage', 'WI_loss', 'WI_rr', 'FloodRisk', 'Ewater', 'Ewwater', 'DigWater', 'R_USWA',
        'WasteInit', 'R_USWA_waste', 'RRWI', 'ConsWaste', 'WWT_I', 'DigWaste', 'LandfillEff', 'GHGIs'
      ];

      for (const indicator_code of indicatorCodes) {
        if (!req.body[indicator_code]) {
          console.warn(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ch·ªâ s·ªë ${indicator_code}`);
          continue;
        }
        const data = req.body[indicator_code];
        const params = data.params || {};

        // L·∫•y indicator_id, domain_id t·ª´ b·∫£ng Indicators
        const indicatorRes = await pool.query(
          'SELECT indicator_id, domain_id, unit_code FROM Indicators WHERE code = $1',
          [indicator_code]
        );
        if (indicatorRes.rows.length === 0) {
          console.warn(`Kh√¥ng t√¨m th·∫•y ch·ªâ s·ªë ${indicator_code} trong b·∫£ng Indicators`);
          continue;
        }
        const { indicator_id, domain_id, unit_code } = indicatorRes.rows[0];

        // T√≠nh gi√° tr·ªã ch·ªâ s·ªë
        let value;
        try {
          value = formulas[indicator_code](params);
        } catch (err) {
          console.error(`L·ªói khi t√≠nh ch·ªâ s·ªë ${indicator_code}:`, err.message);
          value = 0;
        }

        // Ki·ªÉm tra gi√° tr·ªã ph·∫ßn trƒÉm
        if (unit_code === 'percent' && (value < 0 || value > 100)) {
          console.warn(`Gi√° tr·ªã cho ${indicator_code} ph·∫£i t·ª´ 0-100%, nh·∫≠n ƒë∆∞·ª£c: ${value}`);
          value = Math.max(0, Math.min(100, value)); // Gi·ªõi h·∫°n gi√° tr·ªã trong kho·∫£ng 0-100
        }

        // X√°c ƒë·ªãnh level, score, description
        const levelsRes = await pool.query(
          'SELECT criteria, level, score_value, description FROM ScoringLevels WHERE indicator_code = $1',
          [indicator_code]
        );
        let selectedLevel = { level: 'Kh√¥ng x√°c ƒë·ªãnh', score_value: 0, description: 'Kh√¥ng c√≥ m√¥ t·∫£' };
        for (const level of levelsRes.rows) {
          const { min_value, max_value } = parseRange(level.criteria);
          if ((min_value === null || value >= min_value) && (max_value === null || value <= max_value)) {
            selectedLevel = { level: level.level, score_value: level.score_value, description: level.description };
            break;
          }
        }

        // L·∫•y gi√° tr·ªã c≈© ƒë·ªÉ ghi l·ªãch s·ª≠
        const oldQuery = await pool.query(
          'SELECT value, score_awarded, level, description FROM Assessments_Template WHERE city = $1 AND year = $2 AND indicator_code = $3',
          [city, year, indicator_code]
        );
        const oldValues = oldQuery.rows[0] || null;

        // L∆∞u v√†o Assessments_Template
        await pool.query(
          `INSERT INTO Assessments_Template (city, year, domain_id, indicator_id, indicator_code, value, unit_code, score_awarded, assessor, date, level, description)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_DATE, $10, $11)
           ON CONFLICT (city, year, indicator_code) DO UPDATE SET 
             value = EXCLUDED.value, 
             unit_code = EXCLUDED.unit_code,
             score_awarded = EXCLUDED.score_awarded, 
             assessor = EXCLUDED.assessor, 
             date = CURRENT_DATE, 
             level = EXCLUDED.level, 
             description = EXCLUDED.description`,
          [
            city,
            year,
            domain_id,
            indicator_id,
            indicator_code,
            value,
            unit_code,
            selectedLevel.score_value,
            assessor,
            selectedLevel.level,
            selectedLevel.description
          ]
        );

        // Ghi l·ªãch s·ª≠ v√†o edit_history
        await pool.query(
          `INSERT INTO edit_history (table_name, record_id, old_values, new_values, changed_by, change_type, ip_address, user_agent, timestamp)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP)`,
          [
            'Assessments_Template',
            `${city}_${year}_${indicator_code}`,
            oldValues ? JSON.stringify(oldValues) : null,
            JSON.stringify({
              value,
              score_awarded: selectedLevel.score_value,
              level: selectedLevel.level,
              description: selectedLevel.description
            }),
            assessor,
            oldValues ? 'update' : 'insert',
            ip,
            userAgent
          ]
        );
      }

      res.redirect(`/dashboard?year=${year}&success=${encodeURIComponent('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng')}`);
    } catch (err) {
      console.error('L·ªói POST /cndl:', err.message);
      res.redirect(`/cndl?error=${encodeURIComponent(`L·ªói khi l∆∞u d·ªØ li·ªáu: ${err.message}`)}`);
    }
  }
);

// Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
let dbInitialized = false;
async function initializeDatabase() {
  if (dbInitialized) return;

  try {
    console.log('üõ†Ô∏è Kh·ªüi t·∫°o c·∫•u tr√∫c c∆° s·ªü d·ªØ li·ªáu...');

    // X√≥a c√°c b·∫£ng theo th·ª© t·ª± ng∆∞·ª£c v·ªõi ph·ª• thu·ªôc
    await pool.query(`
      DROP TABLE IF EXISTS Assessments_Template CASCADE;
      DROP TABLE IF EXISTS IndicatorWeights CASCADE;
      DROP TABLE IF EXISTS ScoringLevels CASCADE;
      DROP TABLE IF EXISTS Levels CASCADE;
      DROP TABLE IF EXISTS Inputs CASCADE;
      DROP TABLE IF EXISTS District_Indicators CASCADE;
      DROP TABLE IF EXISTS Indicators CASCADE;
      DROP TABLE IF EXISTS DomainWeights CASCADE;
      DROP TABLE IF EXISTS Domains CASCADE;
      DROP TABLE IF EXISTS Units CASCADE;
      DROP TABLE IF EXISTS users CASCADE;
      DROP TABLE IF EXISTS edit_history CASCADE;
      DROP TABLE IF EXISTS file_uploads CASCADE;
    `);

    // T·∫°o c√°c b·∫£ng theo ƒë√∫ng th·ª© t·ª±
    await pool.query(`
      CREATE TABLE Units (
        unit_code VARCHAR(50) PRIMARY KEY,
        description TEXT
      );
    `);

    await pool.query(`
      CREATE TABLE Domains (
        domain_id INTEGER PRIMARY KEY,
        name TEXT,
        description TEXT,
        max_score INTEGER
      );
    `);

    await pool.query(`
      CREATE TABLE Indicators (
        indicator_id INTEGER PRIMARY KEY,
        domain_id INTEGER REFERENCES Domains(domain_id),
        name TEXT,
        code VARCHAR(50),
        max_score INTEGER,
        unit_code VARCHAR(50) REFERENCES Units(unit_code),
        formula TEXT
      );
    `);

    await pool.query(`
      CREATE TABLE ScoringLevels (
        indicator_id INTEGER,
        indicator_code VARCHAR(50),
        level INTEGER,
        description TEXT,
        score_value INTEGER,
        criteria TEXT,
        PRIMARY KEY (indicator_id, level),
        FOREIGN KEY (indicator_id) REFERENCES Indicators(indicator_id)
      );
    `);

    await pool.query(`
      CREATE TABLE DomainWeights (
        item_type TEXT,
        domain_id INTEGER REFERENCES Domains(domain_id),
        item_code TEXT,
        weight NUMERIC
      );
    `);

    await pool.query(`
      CREATE TABLE IndicatorWeights (
        indicator_id INTEGER REFERENCES Indicators(indicator_id),
        indicator_code VARCHAR(50),
        domain_id INTEGER REFERENCES Domains(domain_id),
        weight_within_domain NUMERIC
      );
    `);

    await pool.query(`
      CREATE TABLE Assessments_Template (
        assessment_id SERIAL PRIMARY KEY,
        city TEXT,
        year INTEGER,
        domain_id INTEGER REFERENCES Domains(domain_id),
        indicator_id INTEGER REFERENCES Indicators(indicator_id),
        indicator_code VARCHAR(50),
        value TEXT,
        unit_code VARCHAR(50) REFERENCES Units(unit_code),
        score_awarded INTEGER,
        assessor TEXT,
        date DATE,
        level INTEGER,
        description TEXT,
        CONSTRAINT unique_city_year_indicator UNIQUE (city, year, indicator_code)
      );
    `);

    await pool.query(`
      CREATE TABLE users (
        username VARCHAR(50) PRIMARY KEY,
        password TEXT NOT NULL,
        role VARCHAR(20) NOT NULL DEFAULT 'user'
      );
    `);

    await pool.query(`
      CREATE TABLE edit_history (
        id SERIAL PRIMARY KEY,
        table_name TEXT,
        record_id TEXT,
        old_values JSONB,
        new_values JSONB,
        changed_by TEXT,
        change_type TEXT,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        ip_address TEXT,
        user_agent TEXT
      );
    `);

    await pool.query(`
      CREATE TABLE file_uploads (
        id SERIAL PRIMARY KEY,
        filename TEXT,
        original_name TEXT,
        mimetype TEXT,
        size INTEGER,
        uploaded_by TEXT,
        file_path TEXT,
        upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // TRUNCATE t·∫•t c·∫£ c√°c b·∫£ng ƒë·ªÉ x√≥a d·ªØ li·ªáu c≈© v√† reset identity
    await pool.query(`
      TRUNCATE TABLE Assessments_Template, IndicatorWeights, ScoringLevels, Indicators, DomainWeights, Domains, Units, users, edit_history, file_uploads RESTART IDENTITY;
    `);

    // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng Units
    await pool.query(`
      INSERT INTO Units (unit_code, description) VALUES
      ('percent', 'Ph·∫ßn trƒÉm (%)'),
      ('m2/person', 'm2 tr√™n 1 ng∆∞·ªùi'),
      ('tCO2e/year', 'tCO2 t∆∞∆°ng ƒë∆∞∆°ng / nƒÉm'),
      ('tCO2e/GDP', 'tCO2 t∆∞∆°ng ƒë∆∞∆°ng tr√™n ƒë∆°n v·ªã GDP'),
      ('days', 'S·ªë ng√†y'),
      ('score', 'ƒêi·ªÉm/scale (qualitative)'),
      ('count', 'S·ªë l∆∞·ª£ng (count)'),
      ('kWh or percent', 'kWh ho·∫∑c ph·∫ßn trƒÉm'),
      ('percent or count', 'Ph·∫ßn trƒÉm ho·∫∑c s·ªë l∆∞·ª£ng'),
      ('percent or area', 'Ph·∫ßn trƒÉm ho·∫∑c di·ªán t√≠ch'),
      ('vehicles per 1000 or score', 'S·ªë ph∆∞∆°ng ti·ªán tr√™n 1000 ng∆∞·ªùi ho·∫∑c ƒëi·ªÉm'),
      ('stations per area', 'S·ªë tr·∫°m tr√™n ƒë∆°n v·ªã di·ªán t√≠ch'),
      ('percent or ton', 'Ph·∫ßn trƒÉm ho·∫∑c t·∫•n');
    `);

    // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng Domains
    await pool.query(`
      INSERT INTO Domains (domain_id, name, description, max_score) VALUES
      (1, 'NƒÉng l∆∞·ª£ng & C√¥ng tr√¨nh xanh', 'C√°c ch·ªâ s·ªë v·ªÅ nƒÉng l∆∞·ª£ng t√°i t·∫°o, ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng v√† c√¥ng tr√¨nh xanh', 800),
      (2, 'Quy ho·∫°ch ƒë√¥ th·ªã, ph·ªß xanh & ƒëa d·∫°ng sinh h·ªçc', 'Ch·ªâ s·ªë v·ªÅ ph·ªß xanh, m·∫∑t n∆∞·ªõc, GIS, c·∫£nh b√°o thi√™n tai, k·∫ø ho·∫°ch kh√≠ h·∫≠u', 700),
      (3, 'Giao th√¥ng ƒë√¥ th·ªã & ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠', 'Ch·ªâ s·ªë giao th√¥ng, quan tr·∫Øc kh√¥ng kh√≠, AQI, k·∫ø ho·∫°ch kh√¥ng kh√≠ s·∫°ch', 1000),
      (4, 'Qu·∫£n l√Ω n∆∞·ªõc', 'Ch·ªâ s·ªë qu·∫£n l√Ω t√†i nguy√™n n∆∞·ªõc, gi·∫£m th·∫•t tho√°t, t√°i s·ª≠ d·ª•ng, c·∫•p n∆∞·ªõc ti·∫øt ki·ªám', 800),
      (5, 'Qu·∫£n l√Ω ch·∫•t th·∫£i', 'Ch·ªâ s·ªë gi·∫£m thi·ªÉu ch·∫•t th·∫£i, t√°i ch·∫ø, b√£i ch√¥n l·∫•p, ph√°t th·∫£i GHG t·ª´ r√°c', 800);
    `);

    // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng Indicators
    await pool.query(`
      INSERT INTO Indicators (indicator_id, domain_id, name, code, max_score, unit_code, formula) VALUES
      (1, 1, 'Ti√™u th·ª• ƒëi·ªán t·ª´ c√°c ngu·ªìn nƒÉng l∆∞·ª£ng t√°i t·∫°o', 'ENI_RWE', 15, 'percent', '(E_RE - L_AT&C)/EC *100 + P_RE/P_total *100'),
      (2, 1, 'NƒÉng l∆∞·ª£ng t√°i t·∫°o trong t·ªïng ngu·ªìn cung nƒÉng l∆∞·ª£ng s∆° c·∫•p', 'SENIRE', 15, 'percent', 'SE_RE / ES *100'),
      (3, 1, 'Ch·ªâ s·ªë ti·∫øt ki·ªám ƒëi·ªán', 'EI_Save', 10, 'kWh or percent', 'E_Save / E_C *100'),
      (4, 1, 'Hi·ªáu qu·∫£ v·∫≠n h√†nh h·ªá th·ªëng ƒëi·ªán th√¥ng minh', 'EI_LR', 10, 'percent', 'E_delivered / E_input *100'),
      (5, 1, 'H·ªá th·ªëng chi·∫øu s√°ng ƒë∆∞·ªùng ph·ªë ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng', 'SLI', 10, 'percent or count', '(SL_e + SL_s)/SL *100'),
      (6, 1, 'M·ª©c ƒë·ªô th√∫c ƒë·∫©y c√°c c√¥ng tr√¨nh xanh', 'GBpromo', 10, 'score', 'Qualitative/score by policy'),
      (7, 1, 'X√¢y d·ª±ng c√°c c√¥ng tr√¨nh xanh', 'VNGBI', 15, 'percent or area', '(B_P + B_AC)/(S_GB / S_BC) *100'),
      (8, 2, 'Gi·∫£m ph√°t th·∫£i CO2 t·ª´ ti√™u th·ª• nhi√™n li·ªáu h√≥a th·∫°ch', 'R_CO2e', 15, 'percent', '(CO2eb - CO2et)/CO2eb *100'),
      (9, 2, 'M·ª©c ƒë·ªô quy ho·∫°ch, b·∫£o v·ªá v√† ph√°t tri·ªÉn m·∫∑t n∆∞·ªõc & kh√¥ng gian m·ªü', 'R_S_water', 15, 'percent', '(S_water_present + S_op_present)/(S_water_plan + S_op_plan) *100'),
      (10, 2, 'T·ª∑ l·ªá ph·ªß xanh trong th√†nh ph·ªë (m¬≤/ng∆∞·ªùi)', 'Rcover', 15, 'm2/person', '(S_pp / P) / 12 *100'),
      (11, 2, 'T·ª∑ l·ªá ƒë·∫•t c√¢y xanh ƒë√¥ th·ªã tr√™n t·ªïng di·ªán t√≠ch ƒë·∫•t x√¢y d·ª±ng ƒë√¥ th·ªã', 'Rland_p', 15, 'percent', 'S_land_p / S_total_land *100'),
      (12, 2, 'ƒêa d·∫°ng sinh h·ªçc ƒë√¥ th·ªã', 'UBI_PNRA', 15, 'percent', '(A_natural + A_restored)/A_city *100'),
      (13, 2, '·ª®ng d·ª•ng GIS v√† d·ªØ li·ªáu s·ªë trong quy ho·∫°ch ƒë√¥ th·ªã', 'GISapp', 10, 'score', 'Scale 1-5'),
      (14, 2, 'H·ªá th·ªëng c·∫£nh b√°o & qu·∫£n l√Ω thi√™n tai th√¥ng minh', 'DISaster', 15, 'score', 'Scale 1-5'),
      (15, 2, 'K·∫ø ho·∫°ch h√†nh ƒë·ªông v·ªÅ kh√≠ h·∫≠u', 'ClimateAct', 15, 'score', 'Scale/qualitative'),
      (16, 3, 'T·ª∑ l·ªá bao ph·ªß m·∫°ng l∆∞·ªõi giao th√¥ng phi c∆° gi·ªõi', 'NMT', 15, 'percent', 'NMT_L / L_R *100'),
      (17, 3, 'T·ª∑ l·ªá ph∆∞∆°ng ti·ªán c√¥ng c·ªông ·ª©ng d·ª•ng c√¥ng ngh·ªá s·∫°ch', 'PT_c', 15, 'percent', 'PT_c / PT *100'),
      (18, 3, 'M·ª©c ƒë·ªô d·ªÖ ti·∫øp c·∫≠n ph∆∞∆°ng ti·ªán c√¥ng c·ªông', 'PT1000', 10, 'vehicles per 1000 or score', 'PT_F * 1000 / P'),
      (19, 3, 'T·ª∑ l·ªá h·ªá th·ªëng ƒë√®n t√≠n hi·ªáu giao th√¥ng th√¥ng minh', 'STL', 10, 'percent', 'STL_S / TL *100'),
      (20, 3, 'T·ª∑ l·ªá ƒë∆∞·ªùng ph·ªë t√≠ch h·ª£p c·∫£nh b√°o & th√¥ng tin giao th√¥ng tr·ª±c tuy·∫øn', 'SRRW', 10, 'percent', 'SRRW_L / TSR *100'),
      (21, 3, 'Kh·∫£ nƒÉng th√¥ng h√†nh v√† m·ª©c ph·ª•c v·ª• c·ªßa ƒë∆∞·ªùng ph·ªë', 'RoadCap', 10, 'score', 'Level of service'),
      (22, 3, 'M·∫≠t ƒë·ªô tr·∫°m quan tr·∫Øc kh√¥ng kh√≠ t·ª± ƒë·ªông, li√™n t·ª•c', 'AQstation', 10, 'stations per area', 'AQstation / A_city'),
      (23, 3, 'Kh·∫£ nƒÉng cung c·∫•p d·ªØ li·ªáu & c·∫£nh b√°o AQ th·ªùi gian th·ª±c', 'AQdata', 10, 'score', 'Data availability & integration'),
      (24, 3, 'K·∫ø ho·∫°ch h√†nh ƒë·ªông v√¨ kh√¥ng kh√≠ s·∫°ch', 'CleanAirPlan', 15, 'score', 'Existence and quality of plan'),
      (25, 3, 'M·ª©c ƒë·ªô √¥ nhi·ªÖm kh√¥ng kh√≠ (s·ªë ng√†y AQI v∆∞·ª£t ng∆∞·ª°ng)', 'AQI_TDE', 10, 'days', 'Number of days AQI > threshold'),
      (26, 4, 'ƒê√°nh gi√° m·ª©c ƒë·ªô qu·∫£n l√Ω t√†i nguy√™n n∆∞·ªõc', 'WImanage', 15, 'score', 'Composite'),
      (27, 4, 'Ch·ªâ s·ªë gi·∫£m th·∫•t tho√°t ngu·ªìn n∆∞·ªõc', 'WI_loss', 10, 'percent', '(W_P - W_S) / W_P *100'),
      (28, 4, 'Ch·ªâ s·ªë t√°i s·ª≠ d·ª•ng n∆∞·ªõc th·∫£i', 'WI_rr', 15, 'percent', 'W_rr / W_s *100'),
      (29, 4, 'Qu·∫£n l√Ω r·ªßi ro ng·∫≠p l·ª•t ƒë√¥ th·ªã', 'FloodRisk', 15, 'score', 'Scale 1-5'),
      (30, 4, 'H·ªá th·ªëng c·∫•p n∆∞·ªõc s·∫°ch ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng', 'Ewater', 10, 'score', 'Energy efficiency metric'),
      (31, 4, 'H·ªá th·ªëng qu·∫£n l√Ω n∆∞·ªõc th·∫£i ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng', 'Ewwater', 10, 'score', 'Energy efficiency metric'),
      (32, 4, '·ª®ng d·ª•ng c√¥ng ngh·ªá s·ªë trong qu·∫£n l√Ω n∆∞·ªõc', 'DigWater', 10, 'score', 'Digitalization level'),
      (33, 4, 'T·ª∑ l·ªá ti·∫øp c·∫≠n n∆∞·ªõc s·∫°ch ƒë√¥ th·ªã', 'R_USWA', 15, 'percent', 'P_W / P_S *100'),
      (34, 5, 'C√°c s√°ng ki·∫øn gi·∫£m thi·ªÉu ch·∫•t th·∫£i', 'WasteInit', 10, 'score', 'Number/quality of initiatives'),
      (35, 5, 'T·ª∑ l·ªá ch√¥n l·∫•p r√°c th·∫£i sinh ho·∫°t', 'R_USWA_waste', 15, 'percent', 'W_landfill / W_waste_generate *100'),
      (36, 5, 'M·ª©c ƒë·ªô r√°c th·∫£i kh√¥ ƒë∆∞·ª£c thu h·ªìi v√† t√°i ch·∫ø', 'RRWI', 10, 'percent', '(W_RU + W_RRC) / W_G *100'),
      (37, 5, 'Qu·∫£n l√Ω ch·∫•t th·∫£i x√¢y d·ª±ng', 'ConsWaste', 10, 'score', 'Management level'),
      (38, 5, 'M·ª©c ƒë·ªô x·ª≠ l√Ω ch·∫•t th·∫£i ∆∞·ªõt', 'WWT_I', 10, 'percent or ton', 'W_T / W_G *100'),
      (39, 5, 'Ch·ªâ s·ªë chuy·ªÉn ƒë·ªïi s·ªë trong qu·∫£n l√Ω ch·∫•t th·∫£i', 'DigWaste', 10, 'score', 'Digitalization level'),
      (40, 5, 'Hi·ªáu qu·∫£ v·∫≠n h√†nh b√£i ch√¥n l·∫•p', 'LandfillEff', 15, 'score', 'Operational efficiency'),
      (41, 5, 'C·∫£i thi·ªán ph√°t th·∫£i kh√≠ nh√† k√≠nh trong qu·∫£n l√Ω ch·∫•t th·∫£i', 'GHGIs', 15, 'tCO2e/year', 'GHGs_Landfill + GHGs_WTE + GHGs_Recycling + GHGs_Composting');
    `);

    // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng ScoringLevels
    await pool.query(`
      INSERT INTO ScoringLevels (indicator_id, indicator_code, level, description, score_value, criteria) VALUES
      (1, 'ENI_RWE', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (1, 'ENI_RWE', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (1, 'ENI_RWE', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (1, 'ENI_RWE', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (1, 'ENI_RWE', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (2, 'SENIRE', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (2, 'SENIRE', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (2, 'SENIRE', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (2, 'SENIRE', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (2, 'SENIRE', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (3, 'EI_Save', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 2, '0-10'),
      (3, 'EI_Save', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 4, '10-20'),
      (3, 'EI_Save', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-30'),
      (3, 'EI_Save', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 8, '30-40'),
      (3, 'EI_Save', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 10, '‚â•40'),
      (4, 'EI_LR', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 2, '0-20'),
      (4, 'EI_LR', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 4, '20-40'),
      (4, 'EI_LR', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '40-60'),
      (4, 'EI_LR', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 8, '60-80'),
      (4, 'EI_LR', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 10, '‚â•80'),
      (5, 'SLI', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 2, '0-20'),
      (5, 'SLI', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 4, '20-40'),
      (5, 'SLI', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '40-60'),
      (5, 'SLI', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 8, '60-80'),
      (5, 'SLI', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 10, '‚â•80'),
      (6, 'GBpromo', 1, 'C√°c quy tr√¨nh v·ªÅ c√¥ng tr√¨nh xanh ch·ªâ m·ªõi √°p d·ª•ng ·ªü c√°c qu·∫≠n/huy·ªán', 2, '0-2'),
      (6, 'GBpromo', 2, 'H·ªá th·ªëng vƒÉn b·∫£n ph√°p lu·∫≠t v·ªÅ c√¥ng tr√¨nh xanh ƒë∆∞·ª£c ban h√†nh t·ª´ c∆° quan qu·∫£n l√Ω ·ªü th√†nh ph·ªë. H·ªá th·ªëng vƒÉn b·∫£n ph√°p lu·∫≠t v·ªÅ ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng ƒë∆∞·ª£c ban h√†nh t·ª´ c∆° quan qu·∫£n l√Ω ·ªü th√†nh ph·ªë. Tri·ªÉn khai c√°c h·ªá th·ªëng ISO li√™n quan v·ªÅ c√¥ng tr√¨nh xanh', 4, '2-4'),
      (6, 'GBpromo', 3, 'C√°c ch·ª©ng nh·∫≠n v·ªÅ t√≤a nh√† xanh ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng. C∆° quan ri√™ng bi·ªát v·ªÅ qu·∫£n l√Ω c√¥ng tr√¨nh xanh', 6, '4-6'),
      (6, 'GBpromo', 4, 'Ch∆∞∆°ng tr√¨nh/chi·∫øn l∆∞·ª£c/quy ho·∫°ch c√°c c√¥ng tr√¨nh xanh ƒë√°p ·ª©ng ti√™u chu·∫©n ISO v√† c·∫•p ch·ª©ng nh·∫≠n', 8, '6-8'),
      (6, 'GBpromo', 5, 'C√°n b·ªô c·ªßa c∆° quan v·ªÅ qu·∫£n l√Ω c√¥ng tr√¨nh xanh v√† c√°c b√™n li√™n quan ƒë∆∞·ª£c ƒë√†o t·∫°o th∆∞·ªùng xuy√™n. C√°c ·∫•n ph·∫©m v·ªÅ c√¥ng tr√¨nh xanh ƒë∆∞·ª£c xu·∫•t b·∫£n. C√°c h·ªôi th·∫£o v·ªÅ c√¥ng tr√¨nh xanh ƒë∆∞·ª£c t·ªï ch·ª©c th∆∞·ªùng xuy√™n', 10, '‚â•8'),
      (7, 'VNGBI', 1, 'Kh√¥ng c√≥ t√≤a nh√† xanh n√†o ƒë∆∞·ª£c ch·ª©ng nh·∫≠n', 3, '0-10'),
      (7, 'VNGBI', 2, 'L√™n ƒë·∫øn 10% trong nƒÉm c∆° s·ªü ƒë∆∞·ª£c ch·ª©ng nh·∫≠n', 6, '10-40'),
      (7, 'VNGBI', 3, 'L√™n ƒë·∫øn 40% trong nƒÉm c∆° s·ªü ƒë∆∞·ª£c ch·ª©ng nh·∫≠n', 9, '40-60'),
      (7, 'VNGBI', 4, 'L√™n ƒë·∫øn 60% trong nƒÉm c∆° s·ªü ƒë∆∞·ª£c ch·ª©ng nh·∫≠n', 12, '60-80'),
      (7, 'VNGBI', 5, 'T·∫•t c·∫£ c√°c t√≤a nh√† trong nƒÉm c∆° s·ªü ƒë∆∞·ª£c ch·ª©ng nh·∫≠n', 15, '‚â•80'),
      (8, 'R_CO2e', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (8, 'R_CO2e', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (8, 'R_CO2e', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (8, 'R_CO2e', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (8, 'R_CO2e', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (9, 'R_S_water', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (9, 'R_S_water', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (9, 'R_S_water', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (9, 'R_S_water', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (9, 'R_S_water', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (10, 'Rcover', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (10, 'Rcover', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (10, 'Rcover', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (10, 'Rcover', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (10, 'Rcover', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (11, 'Rland_p', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (11, 'Rland_p', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (11, 'Rland_p', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (11, 'Rland_p', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (11, 'Rland_p', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (12, 'UBI_PNRA', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (12, 'UBI_PNRA', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (12, 'UBI_PNRA', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (12, 'UBI_PNRA', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (12, 'UBI_PNRA', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (13, 'GISapp', 1, 'Ch∆∞a ·ª©ng d·ª•ng GIS (quy ho·∫°ch th·ªß c√¥ng, r·ªùi r·∫°c, kh√¥ng c√≥ s·ªë h√≥a)', 2, '0-2'),
      (13, 'GISapp', 2, 'GIS c∆° b·∫£n (b·∫£n ƒë·ªì tƒ©nh, s·ªë h√≥a < 50%, ch∆∞a ph√¢n t√≠ch chuy√™n s√¢u)', 4, '2-4'),
      (13, 'GISapp', 3, 'T√≠ch h·ª£p th√¥ng tin quy ho·∫°ch (d·ªØ li·ªáu s·ªë h√≥a 50‚Äì75%, c·∫≠p nh·∫≠t ƒë·ªãnh k·ª≥, qu·∫£n l√Ω c√¥ng khai)', 6, '4-6'),
      (13, 'GISapp', 4, 'Ph√¢n t√≠ch kh√¥ng gian n√¢ng cao (d·ªØ li·ªáu s·ªë h√≥a 75‚Äì90%, c·∫≠p nh·∫≠t h√†ng th√°ng)', 8, '6-8'),
      (13, 'GISapp', 5, 'GIS th·ªùi gian th·ª±c (Digital Twin), d·ªØ li·ªáu s·ªë h√≥a >90%, m√¥ ph·ªèng/ra quy·∫øt ƒë·ªãnh t·ª©c th·ªùi', 10, '‚â•8'),
      (14, 'DISaster', 1, 'H·ªá th·ªëng c·∫£nh b√°o th·ªß c√¥ng/truy·ªÅn th·ªëng. D·ª± b√°o, ·ª©ng ph√≥ d·ª±a v√†o kinh nghi·ªám, b·∫£n ƒë·ªì gi·∫•y, th√¥ng tin r·ªùi r·∫°c; kh√¥ng c√≥ tr·∫°m quan tr·∫Øc t·ª± ƒë·ªông; c·∫£nh b√°o s·ªõm g·∫ßn nh∆∞ kh√¥ng c√≥.', 3, '0-3'),
      (14, 'DISaster', 2, 'C√≥ m·ªôt v√†i tr·∫°m quan tr·∫Øc t·ª± ƒë·ªông nh∆∞ng m·∫≠t ƒë·ªô th·∫•p (<1 tr·∫°m/100 km¬≤), k·∫øt n·ªëi d·ªØ li·ªáu r·ªùi r·∫°c, c·∫£nh b√°o ph·∫ßn l·ªõn th·ªß c√¥ng; ch·ªâ c√≥ SMS/loa truy·ªÅn th·ªëng.', 6, '3-6'),
      (14, 'DISaster', 3, 'ƒê√£ t√≠ch h·ª£p GIS; d·ªØ li·ªáu tr·∫°m quan tr·∫Øc qu·∫£n l√Ω tr√™n b·∫£n ƒë·ªì s·ªë, m·∫≠t ƒë·ªô tr·∫°m 1‚Äì2 tr·∫°m/100 km¬≤; ch∆∞a AI/IoT; c·∫£nh b√°o t·ª± ƒë·ªông ƒë·∫°t 30‚Äì50%.', 9, '6-9'),
      (14, 'DISaster', 4, 'ƒê√£ √°p d·ª•ng AI, IoT (c·∫£m bi·∫øn, ph√¢n t√≠ch t·ª± ƒë·ªông), m·∫≠t ƒë·ªô tr·∫°m >2 tr·∫°m/100 km¬≤; c·∫£nh b√°o t·ª± ƒë·ªông ƒë·∫°t 50‚Äì80%; d·ªØ li·ªáu c·∫≠p nh·∫≠t li√™n t·ª•c nh∆∞ng ch∆∞a ph·ªß r·ªông kh·∫Øp TP.', 12, '9-12'),
      (14, 'DISaster', 5, 'H·ªá th·ªëng c·∫£nh b√°o ƒëa thi√™n tai th√¥ng minh, m·∫°ng l∆∞·ªõi c·∫£m bi·∫øn d√†y ƒë·∫∑c (>5 tr·∫°m/100 km¬≤), t√≠ch h·ª£p GIS‚ÄìIoT‚ÄìAI‚ÄìBig Data to√†n th√†nh ph·ªë, c·∫£nh b√°o th·ªùi gian th·ª±c, t·ª± ƒë·ªông h√≥a >80%, th√¥ng tin c√° th·ªÉ h√≥a t·ªõi ng∆∞·ªùi d√¢n.', 15, '‚â•12'),
      (15, 'ClimateAct', 1, 'Ch∆∞a x√¢y d·ª±ng k·∫ø ho·∫°ch h√†nh ƒë·ªông v·ªÅ kh√≠ h·∫≠u ho·∫∑c ch·ªâ d·ª´ng l·∫°i ·ªü m·ª©c ƒë·ªãnh h∆∞·ªõng chung; kh√¥ng c√≥ m·ª•c ti√™u, gi·∫£i ph√°p, hay l·ªô tr√¨nh c·ª• th·ªÉ.', 3, '0-3'),
      (15, 'ClimateAct', 2, 'ƒê√£ x√¢y d·ª±ng k·∫ø ho·∫°ch s∆° b·ªô ho·∫∑c l·ªìng gh√©p kh√≠ h·∫≠u v√†o quy ho·∫°ch t·ªïng th·ªÉ, nh∆∞ng thi·∫øu m·ª•c ti√™u ƒë·ªãnh l∆∞·ª£ng, thi·∫øu l·ªô tr√¨nh th·ª±c hi·ªán; m·ªõi d·ª´ng ·ªü gi·∫£i ph√°p chung ho·∫∑c t·∫ßm nh√¨n.', 6, '3-6'),
      (15, 'ClimateAct', 3, 'C√≥ k·∫ø ho·∫°ch h√†nh ƒë·ªông v·ªÅ kh√≠ h·∫≠u ƒë∆∞·ª£c UBND ban h√†nh, x√°c ƒë·ªãnh m·ª•c ti√™u r√µ r√†ng (v√≠ d·ª•: gi·∫£m ph√°t th·∫£i 10‚Äì20% ƒë·∫øn nƒÉm 2030), ƒë√£ t√≠ch h·ª£p v√†o quy ho·∫°ch ph√°t tri·ªÉn ƒë√¥ th·ªã; c√≥ ph√¢n c√¥ng tr√°ch nhi·ªám, m·ªôt s·ªë gi·∫£i ph√°p ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán.', 9, '6-9'),
      (15, 'ClimateAct', 4, 'K·∫ø ho·∫°ch ƒë√£ x√°c l·∫≠p m·ª•c ti√™u gi·∫£m ph√°t th·∫£i trung h·∫°n (Net Zero 2045‚Äì2050), x√°c ƒë·ªãnh r√µ lƒ©nh v·ª±c ∆∞u ti√™n (nƒÉng l∆∞·ª£ng, giao th√¥ng, x√¢y d·ª±ng‚Ä¶), c√≥ l·ªô tr√¨nh th·ª±c hi·ªán, c∆° ch·∫ø ki·ªÉm so√°t/gi√°m s√°t (MRV), c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n.', 12, '9-12'),
      (15, 'ClimateAct', 5, 'K·∫ø ho·∫°ch h√†nh ƒë·ªông kh√≠ h·∫≠u t√≠ch h·ª£p to√†n di·ªán, m·ª•c ti√™u Net Zero ho·∫∑c trung h√≤a carbon tr∆∞·ªõc 2050, ƒë√£ th·ª±c thi c√°c d·ª± √°n gi·∫£m ph√°t th·∫£i l·ªõn, c√≥ h·ªá th·ªëng gi√°m s√°t MRV minh b·∫°ch, c√¥ng khai k·∫øt qu·∫£ h√†ng nƒÉm, k·∫øt n·ªëi v·ªõi c√°c m·∫°ng l∆∞·ªõi qu·ªëc t·∫ø (C40, Race to Zero), thu h√∫t s·ª± tham gia c·ªông ƒë·ªìng v√† doanh nghi·ªáp.', 15, '‚â•12'),
      (16, 'NMT', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (16, 'NMT', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (16, 'NMT', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (16, 'NMT', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (16, 'NMT', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (17, 'PT_c', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 3, '0-20'),
      (17, 'PT_c', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '20-40'),
      (17, 'PT_c', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 9, '40-60'),
      (17, 'PT_c', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 12, '60-80'),
      (17, 'PT_c', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 15, '‚â•80'),
      (18, 'PT1000', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 2, '0-50'),
      (18, 'PT1000', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 4, '50-100'),
      (18, 'PT1000', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '100-150'),
      (18, 'PT1000', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 8, '150-200'),
      (18, 'PT1000', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 10, '‚â•200'),
      (19, 'STL', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 2, '0-20'),
      (19, 'STL', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 4, '20-40'),
      (19, 'STL', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '40-60'),
      (19, 'STL', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 8, '60-80'),
      (19, 'STL', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 10, '‚â•80'),
      (20, 'SRRW', 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 2, '0-20'),
      (20, 'SRRW', 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 4, '20-40'),
      (20, 'SRRW', 3, 'M√¥ t·∫£ M·ª©c 3 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 6, '40-60'),
      (20, 'SRRW', 4, 'M√¥ t·∫£ M·ª©c 4 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 8, '60-80'),
      (20, 'SRRW', 5, 'M√¥ t·∫£ M·ª©c 5 - c√≥ th·ªÉ ch·ªânh s·ª≠a', 10, '‚â•80'),
      (21, 'RoadCap', 1, 'T·ª∑ l·ªá m·∫°ng l∆∞·ªõi giao th√¥ng th√¥ng tho√°ng (m·ª©c A ‚Äì B): 0 - < 35%', 2, '0-35'),
      (21, 'RoadCap', 2, 'T·ª∑ l·ªá m·∫°ng l∆∞·ªõi giao th√¥ng th√¥ng tho√°ng (m·ª©c A ‚Äì B): 35% - < 50%', 4, '35-50'),
      (21, 'RoadCap', 3, 'T·ª∑ l·ªá m·∫°ng l∆∞·ªõi giao th√¥ng th√¥ng tho√°ng (m·ª©c A ‚Äì B): 50% - < 75%', 6, '50-75'),
      (21, 'RoadCap', 4, 'T·ª∑ l·ªá m·∫°ng l∆∞·ªõi giao th√¥ng th√¥ng tho√°ng (m·ª©c A ‚Äì B): 75% - < 90%', 8, '75-90'),
      (21, 'RoadCap', 5, 'T·ª∑ l·ªá m·∫°ng l∆∞·ªõi giao th√¥ng th√¥ng tho√°ng (m·ª©c A ‚Äì B): 90% - 100%', 10, '‚â•90'),
      (22, 'AQstation', 1, 'Kh√¥ng c√≥ tr·∫°m quan tr·∫Øc kh√¥ng kh√≠ t·ª± ƒë·ªông, li√™n t·ª•c', 2, '0'),
      (22, 'AQstation', 2, 'C√≥ tr·∫°m quan tr·∫Øc kh√¥ng kh√≠ t·ª± ƒë·ªông, li√™n t·ª•c ‚â§ 12 tr·∫°m', 4, '1-12'),
      (22, 'AQstation', 3, 'C√≥ tr·∫°m quan tr·∫Øc kh√¥ng kh√≠ t·ª± ƒë·ªông, li√™n t·ª•c t·ª´ > 12 ‚Äì 15 tr·∫°m', 6, '12-15'),
      (22, 'AQstation', 4, 'C√≥ tr·∫°m quan tr·∫Øc kh√¥ng kh√≠ t·ª± ƒë·ªông, li√™n t·ª•c t·ª´ > 15 ‚Äì 20 tr·∫°m', 8, '15-20'),
      (22, 'AQstation', 5, 'C√≥ tr·∫°m quan tr·∫Øc kh√¥ng kh√≠ t·ª± ƒë·ªông, li√™n t·ª•c > 20 tr·∫°m', 10, '‚â•20'),
      (23, 'AQdata', 1, 'Ch∆∞a c√¥ng b·ªë', 2, '0-2'),
      (23, 'AQdata', 2, 'C√≥ c√¥ng b·ªë ch·ªâ s·ªë b·ª•i m·ªãn (PM10/ PM2.5) c√¥ng khai tr√™n c·ªïng th√¥ng tin c·ªßa c∆° quan qu·∫£n l√Ω.', 4, '2-4'),
      (23, 'AQdata', 3, 'C√≥ c√¥ng b·ªë c√¥ng khai v·ªõi ƒëa th√¥ng s·ªë theo quy ƒë·ªãnh t·∫°i Th√¥ng t∆∞ 10/2021/TT-BTNMT tr√™n c·ªïng th√¥ng tin c·ªßa c∆° quan qu·∫£n l√Ω.', 6, '4-6'),
      (23, 'AQdata', 4, 'C√≥ c√¥ng b·ªë c√¥ng khai v·ªõi ƒëa th√¥ng s·ªë theo quy ƒë·ªãnh t·∫°i Th√¥ng t∆∞ 10/2021/TT-BTNMT v√† t√≠ch h·ª£p tr√™n nh·ªØng n·ªÅn t·∫£ng kh√°c ngo√†i c·ªïng th√¥ng tin c·ªßa c∆° quan qu·∫£n l√Ω.', 8, '6-8'),
      (23, 'AQdata', 5, 'C√≥ c√¥ng b·ªë c√¥ng khai v·ªõi ƒëa th√¥ng s·ªë theo quy ƒë·ªãnh t·∫°i Th√¥ng t∆∞ 10/2021/TT-BTNMT, c√≥ t√≠ch h·ª£p tr√™n nh·ªØng n·ªÅn t·∫£ng kh√°c ngo√†i c·ªïng th√¥ng tin c·ªßa c∆° quan qu·∫£n l√Ω v√† t√≠ch h·ª£p ch·ª©c nƒÉng khuy·∫øn ngh·ªã, c·∫£nh b√°o ƒë·ªëi v·ªõi c·ªông ƒë·ªìng, ƒë·∫∑c bi·ªát l√† c√°c nh√≥m ƒë·ªëi t∆∞·ª£ng nh·∫°y c·∫£m.', 10, '‚â•8'),
      (24, 'CleanAirPlan', 1, 'Kh√¥ng c√¢n nh·∫Øc', 3, '0-3'),
      (24, 'CleanAirPlan', 2, 'Gi√°m s√°t v√† c√¥ng b·ªë d·ªØ li·ªáu: Th·ª±c hi·ªán quan tr·∫Øc c√°c th√¥ng s·ªë b·∫Øt bu·ªôc theo quy ƒë·ªãnh. C√¥ng b·ªë d·ªØ li·ªáu quan tr·∫Øc v·ªõi c·ªông ƒë·ªìng', 6, '3-6'),
      (24, 'CleanAirPlan', 3, 'Tu√¢n th·ªß m·ª•c ti√™u k·∫ø ho·∫°ch h√†nh ƒë·ªông c·ªßa qu·ªëc gia v·ªÅ kh√¥ng kh√≠. C√≥ k·∫ø ho·∫°ch th·ª±c hi·ªán ki·ªÉm so√°t, c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng kh√¥ng kh√≠.', 9, '6-9'),
      (24, 'CleanAirPlan', 4, 'Ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng kh√¥ng kh√≠ ƒë∆∞·ª£c c·∫£i thi·ªán. ƒê·∫°t ƒë∆∞·ª£c m·ª•c ti√™u c·ªßa k·∫ø ho·∫°ch ki·ªÉm so√°t, c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng kh√¥ng kh√≠ ƒë√£ ƒë·ªÅ ra (t√≠nh trong m·ªôt nƒÉm g·∫ßn nh·∫•t).', 12, '9-12'),
      (24, 'CleanAirPlan', 5, 'T·∫•t c·∫£ ch·ªâ s·ªë gi√°m s√°t theo quy ƒë·ªãnh ƒê·∫°t QCVN v·ªÅ ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ (t√≠nh trong m·ªôt nƒÉm g·∫ßn nh·∫•t).', 15, '‚â•12'),
      (25, 'AQI_TDE', 1, '0%', 2, '0'),
      (25, 'AQI_TDE', 2, '0% - < 70%', 4, '0-70'),
      (25, 'AQI_TDE', 3, '70 ‚Äì < 75%', 6, '70-75'),
      (25, 'AQI_TDE', 4, '75 ‚Äì < 80%', 8, '75-80'),
      (25, 'AQI_TDE', 5, '‚â• 80%', 10, '‚â•80'),
      (26, 'WImanage', 1, 'ƒê√°nh gi√° s∆° b·ªô ngu·ªìn n∆∞·ªõc', 3, '0-3'),
      (26, 'WImanage', 2, 'B√°o c√°o ki·ªÉm k√™ ngu·ªìn n∆∞·ªõc hi·ªán c√≥, d·ª± b√°o nhu c·∫ßu n∆∞·ªõc trong t∆∞∆°ng lai v√† kh·∫£ nƒÉng cung c·∫•p n∆∞·ªõc giai ƒëo·∫°n 5 nƒÉm', 6, '3-6'),
      (26, 'WImanage', 3, 'K·∫ø ho·∫°ch Qu·∫£n l√Ω T√†i nguy√™n n∆∞·ªõc ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi c√°c H√†nh ƒë·ªông Ng·∫Øn h·∫°n, Trung h·∫°n v√† D√†i h·∫°n', 9, '6-9'),
      (26, 'WImanage', 4, 'B√°o c√°o c√¢n b·∫±ng n∆∞·ªõc nh·∫±m ƒë√°p ·ª©ng nhu c·∫ßu n∆∞·ªõc trong t∆∞∆°ng lai', 12, '9-12'),
      (26, 'WImanage', 5, 'L·ªìng gh√©p k·ªãch b·∫£n bi·∫øn ƒë·ªïi kh√≠ h·∫≠u ƒë·∫øn k·∫ø ho·∫°ch qu·∫£n l√Ω ngu·ªìn n∆∞·ªõc trong t∆∞∆°ng lai', 15, '‚â•12'),
      (27, 'WI_loss', 1, '25%', 2, '‚â•25'),
      (27, 'WI_loss', 2, '18%', 4, '18-25'),
      (27, 'WI_loss', 3, '>15%', 6, '15-18'),
      (27, 'WI_loss', 4, '15% - 12%', 8, '12-15'),
      (27, 'WI_loss', 5, '<12%', 10, '<12'),
      (28, 'WI_rr', 1, '0', 3, '0'),
      (28, 'WI_rr', 2, '<5%', 6, '0-5'),
      (28, 'WI_rr', 3, '5% - 15%', 9, '5-15'),
      (28, 'WI_rr', 4, '15% - 30%', 12, '15-30'),
      (28, 'WI_rr', 5, 'Tr√™n 30%', 15, '‚â•30'),
      (29, 'FloodRisk', 1, 'Ch∆∞a c√≥ h·ªá th·ªëng c·∫£nh b√°o s·ªõm. Gi√°m s√°t th·ªß c√¥ng b·∫±ng con ng∆∞·ªùi. Kh√¥ng c√≥ c·∫£m bi·∫øn m·ª±c n∆∞·ªõc ho·∫∑c d·ªØ li·ªáu th·ªùi gian th·ª±c.', 3, '0-3'),
      (29, 'FloodRisk', 2, 'Tri·ªÉn khai c·∫£m bi·∫øn m·ª±c n∆∞·ªõc ·ªü m·ªôt s·ªë ƒëi·ªÉm ƒëen. C√≥ b·∫£n ƒë·ªì ƒëi·ªÉm ng·∫≠p nh∆∞ng ch∆∞a t√≠ch h·ª£p GIS/IoT. C·∫£nh b√°o ng·∫≠p l·ª•t g·ª≠i qua h·ªá th·ªëng n·ªôi b·ªô ho·∫∑c b√°o th·ªß c√¥ng. C√≥ k·∫ø ho·∫°ch ·ª©ng ph√≥ ng·∫≠p nh∆∞ng kh√¥ng c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n', 6, '3-6'),
      (29, 'FloodRisk', 3, 'H·ªá th·ªëng c·∫£m bi·∫øn m·ª±c n∆∞·ªõc ho·∫°t ƒë·ªông th·ªùi gian th·ª±c t·∫°i c√°c ƒëi·ªÉm quan tr·ªçng. ·ª®ng d·ª•ng ph·∫ßn m·ªÅm GIS m√¥ ph·ªèng tho√°t n∆∞·ªõc m∆∞a (v√≠ d·ª•: SWMM, MIKE URBAN). H·ªá th·ªëng c·∫£nh b√°o k·∫øt n·ªëi ƒë·∫øn ng∆∞·ªùi d√¢n (SMS, app). C√≥ c∆° ch·∫ø ƒëi·ªÅu ti·∫øt c·ªëng, h·ªì ch·ª©a b√°n t·ª± ƒë·ªông.', 9, '6-9'),
      (29, 'FloodRisk', 4, 'H·ªá th·ªëng c·∫£m bi·∫øn to√†n di·ªán (m∆∞a, d√≤ng ch·∫£y, ng·∫≠p c·ª•c b·ªô, √°p l·ª±c c·ªëng). T√≠ch h·ª£p AI ph√¢n t√≠ch v√† c·∫£nh b√°o s·ªõm d·ª±a tr√™n d·ª± b√°o th·ªùi ti·∫øt. H·ªá th·ªëng ph·∫£n ·ª©ng t·ª± ƒë·ªông: ƒë√≥ng/m·ªü van, ƒëi·ªÅu khi·ªÉn m√°y b∆°m. K·∫øt n·ªëi h·ªá th·ªëng giao th√¥ng ƒë·ªÉ c·∫£nh b√°o v√† ƒëi·ªÅu h∆∞·ªõng d√≤ng xe.', 12, '9-12'),
      (29, 'FloodRisk', 5, 'Qu·∫£n l√Ω ng·∫≠p t√≠ch h·ª£p v√†o chi·∫øn l∆∞·ª£c ƒë√¥ th·ªã ch·ªëng ch·ªãu kh√≠ h·∫≠u (theo SDG 11, 13). T√≠ch h·ª£p d·ªØ li·ªáu ng·∫≠p v·ªõi nƒÉng l∆∞·ª£ng, n∆∞·ªõc, ch·∫•t th·∫£i, y t·∫ø, d√¢n c∆∞. S·ª≠ d·ª•ng d·ªØ li·ªáu v·ªá tinh, m√¥ h√¨nh h·ªçc m√°y ƒë·ªÉ d·ª± ƒëo√°n v√† l·∫≠p k·∫ø ho·∫°ch ƒë√¥ th·ªã. D·ªØ li·ªáu m·ªü, ng∆∞·ªùi d√¢n v√† doanh nghi·ªáp ƒë∆∞·ª£c truy c·∫≠p v√† ph·∫£n h·ªìi th√¥ng tin th·ªùi gian th·ª±c.', 15, '‚â•12'),
      (30, 'Ewater', 1, 'B√°o c√°o ki·ªÉm to√°n c√¥ng su·∫•t b∆°m t·∫°i c√°c tr·∫°m', 2, '0-2'),
      (30, 'Ewater', 2, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 5% - 10%', 4, '2-4'),
      (30, 'Ewater', 3, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 10% - 15%', 6, '4-6'),
      (30, 'Ewater', 4, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 15% - 20%', 8, '6-8'),
      (30, 'Ewater', 5, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 20% - 25%', 10, '‚â•8'),
      (31, 'Ewwater', 1, 'B√°o c√°o ki·ªÉm to√°n c√¥ng su·∫•t b∆°m t·∫°i c√°c tr·∫°m', 2, '0-2'),
      (31, 'Ewwater', 2, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 5% - 10%', 4, '2-4'),
      (31, 'Ewwater', 3, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 10% - 15%', 6, '4-6'),
      (31, 'Ewwater', 4, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 15% - 20%', 8, '6-8'),
      (31, 'Ewwater', 5, 'T√≠nh to√°n v·ªõi k·∫øt qu·∫£ gi·∫£m nƒÉng l∆∞·ª£ng so v·ªõi giai ƒëo·∫°n 5 nƒÉm tr∆∞·ªõc l√† 20% - 25%', 10, '‚â•8'),
      (32, 'DigWater', 1, 'C√≥ d·ªØ li·ªáu v·∫≠n h√†nh gi·∫•y/t·ªáp', 2, '0-2'),
      (32, 'DigWater', 2, '>10% gi√°m s√°t t·ª´ xa b·∫±ng SCADA. C√≥ t√≠ch h·ª£p GIS ƒë·ªÉ theo d√µi m·∫°ng l∆∞·ªõi c·∫•p n∆∞·ªõc', 4, '2-4'),
      (32, 'DigWater', 3, '10% - 50% gi√°m s√°t t·ª´ xa b·∫±ng SCADA. C√≥ Dashboard n·ªôi b·ªô. T√≠ch h·ª£p GIS ƒë·ªÉ theo d√µi m·∫°ng l∆∞·ªõi c·∫•p n∆∞·ªõc', 6, '4-6'),
      (32, 'DigWater', 4, '50% - 70% gi√°m s√°t t·ª´ xa b·∫±ng SCADA. C√≥ Dashboard n·ªôi b·ªô. T√≠ch h·ª£p GIS ƒë·ªÉ theo d√µi m·∫°ng l∆∞·ªõi c·∫•p n∆∞·ªõc', 8, '6-8'),
      (32, 'DigWater', 5, 'Tr√™n 70% gi√°m s√°t t·ª´ xa b·∫±ng SCADA. C√≥ Dashboard c√¥ng khai. T√≠ch h·ª£p GIS ƒë·ªÉ theo d√µi m·∫°ng l∆∞·ªõi c·∫•p n∆∞·ªõc. T√≠ch h·ª£p GIS to√†n di·ªán trong qu·∫£n l√Ω v√† gi√°m s√°t', 10, '‚â•8'),
      (33, 'R_USWA', 1, '>50% d√¢n s·ªë ƒë√¥ th·ªã ti·∫øp c·∫≠n n∆∞·ªõc s·∫°ch', 3, '0-50'),
      (33, 'R_USWA', 2, '50 ‚Äì <75% d√¢n s·ªë ƒë√¥ th·ªã ti·∫øp c·∫≠n n∆∞·ªõc s·∫°ch', 6, '50-75'),
      (33, 'R_USWA', 3, '75 ‚Äì <90% d√¢n s·ªë ƒë√¥ th·ªã ti·∫øp c·∫≠n n∆∞·ªõc s·∫°ch', 9, '75-90'),
      (33, 'R_USWA', 4, '90 ‚Äì <100% d√¢n s·ªë ƒë√¥ th·ªã ti·∫øp c·∫≠n n∆∞·ªõc s·∫°ch', 12, '90-100'),
      (33, 'R_USWA', 5, '100% d√¢n s·ªë ƒë√¥ th·ªã ti·∫øp c·∫≠n n∆∞·ªõc s·∫°ch', 15, '‚â•100'),
      (34, 'WasteInit', 1, 'Kh√¥ng c√≥ s√°ng ki·∫øn', 2, '0-2'),
      (34, 'WasteInit', 2, 'C√≥ ƒëƒÉng k√Ω c√°c s√°ng ki·∫øn', 4, '2-4'),
      (34, 'WasteInit', 3, 'C√≥ √°p d·ª•ng c√°c s√°ng ki·∫øn', 6, '4-6'),
      (34, 'WasteInit', 4, 'C√≥ √°p d·ª•ng c√°c s√°ng ki·∫øn v√† ƒë√°nh gi√° hi·ªáu qu·∫£', 8, '6-8'),
      (34, 'WasteInit', 5, 'C√≥ √°p d·ª•ng c√°c s√°ng ki·∫øn v√† nh√¢n r·ªông s√°ng ki·∫øn', 10, '‚â•8'),
      (35, 'R_USWA_waste', 1, 'WI > 70%', 3, '‚â•70'),
      (35, 'R_USWA_waste', 2, 'WI: ‚â§ 70% - ‚â§ 50%', 6, '50-70'),
      (35, 'R_USWA_waste', 3, 'WI: > 50% - ‚â§ 30%', 9, '30-50'),
      (35, 'R_USWA_waste', 4, 'WI: > 30% - 10%', 12, '10-30'),
      (35, 'R_USWA_waste', 5, 'WI: ‚â§ 10%', 15, '0-10'),
      (36, 'RRWI', 1, 'Th√†nh ph·ªë c√≥ ∆∞u ti√™n cho vi·ªác t√°i s·ª≠ d·ª•ng CTR', 2, '0-2'),
      (36, 'RRWI', 2, 'C√≥ thu h·ªìi v·∫≠t li·ªáu v√† c√≥ t·ªìn t·∫°i c∆° s·ªü ph√¢n ƒëo·∫°n t√°i ch·∫ø', 4, '2-4'),
      (36, 'RRWI', 3, '10%', 6, '4-10'),
      (36, 'RRWI', 4, '10% - 20%', 8, '10-20'),
      (36, 'RRWI', 5, '> 20%', 10, '‚â•20'),
      (37, 'ConsWaste', 1, 'C√≥ t·ªìn t·∫°i c√°c h·ªá th·ªëng x·ª≠ l√Ω CTXD', 2, '0-2'),
      (37, 'ConsWaste', 2, 'C√≥ ƒëi·ªÉm thu gom ch·∫•t th·∫£i XD hi·ªán h·ªØu', 4, '2-4'),
      (37, 'ConsWaste', 3, 'C√≥ v·∫≠n chuy·ªÉn v√† x·ª≠ l√Ω chuy√™n d·ª•ng cho ch·∫•t th·∫£i XD hi·ªán h·ªØu. CS3.1 > 70%', 6, '4-6'),
      (37, 'ConsWaste', 4, 'C√≥ x·ª≠ l√Ω chuy√™n d·ª•ng cho ch·∫•t th·∫£i XD. CS3.2 > 50%', 8, '6-8'),
      (37, 'ConsWaste', 5, 'T√°i s·ª≠ d·ª•ng v√† t√°i ch·∫ø ch·∫•t th·∫£i XD. CS3.2 = 100%', 10, '‚â•8'),
      (38, 'WWT_I', 1, '< 10%', 2, '0-10'),
      (38, 'WWT_I', 2, '10% ‚Äì < 30%', 4, '10-30'),
      (38, 'WWT_I', 3, '30% ‚Äì < 50%', 6, '30-50'),
      (38, 'WWT_I', 4, '50% ‚Äì < 75%', 8, '50-75'),
      (38, 'WWT_I', 5, '‚â• 75%', 10, '‚â•75'),
      (39, 'DigWaste', 1, 'Kh√¥ng √°p d·ª•ng c√¥ng ngh·ªá s·ªë trong qu·∫£n l√Ω ch·∫•t th·∫£i', 2, '0-2'),
      (39, 'DigWaste', 2, 'C√≥ h·ªá th·ªëng qu·∫£n l√Ω d·ªØ li·ªáu n·ªôi b·ªô (Excel, email‚Ä¶)', 4, '2-4'),
      (39, 'DigWaste', 3, 'Th√πng r√°c c√¥ng c·ªông c√≥ c·∫£m bi·∫øn, ·ª©ng d·ª•ng GPS ƒë·ªÉ gi√°m s√°t xe thu gom', 6, '4-6'),
      (39, 'DigWaste', 4, 'C√≥ h·ªá th·ªëng qu·∫£n l√Ω t·∫≠p trung, li√™n th√¥ng c√°c c∆° quan, s·ª≠ d·ª•ng c·∫£m bi·∫øn, thu th·∫≠p d·ªØ li·ªáu th·ªùi gian th·ª±c', 8, '6-8'),
      (39, 'DigWaste', 5, 'H·ªá th·ªëng t√≠ch h·ª£p: ICT + GIS + AI + c·ªïng cung c·∫•p th√¥ng tin c√¥ng khai', 10, '‚â•8'),
      (40, 'LandfillEff', 1, 'C√≤n t·ªìn t·∫°i c√°c b√£i ch√¥n l·∫•p kh√¥ng h·ª£p v·ªá sinh v√† ch∆∞a c√≥ ph∆∞∆°ng √°n x·ª≠ l√Ω.', 3, '0-3'),
      (40, 'LandfillEff', 2, 'C√≥ ph∆∞∆°ng √°n x·ª≠ l√Ω √¥ nhi·ªÖm, c·∫£i t·∫°o ƒë√°p ·ª©ng y√™u c·∫ßu v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng ƒë·ªëi v·ªõi c√°c b√£i ch√¥n l·∫•p kh√¥ng h·ª£p v·ªá sinh. X·ª≠ l√Ω tri·ªát ƒë·ªÉ c√°c b√£i ch√¥n l·∫•p ch·∫•t th·∫£i sinh ho·∫°t t·ª± ph√°t v√† ngƒÉn ch·∫∑n k·ªãp th·ªùi vi·ªác h√¨nh th√†nh c√°c b√£i ch√¥n l·∫•p t·ª± ph√°t.', 6, '3-6'),
      (40, 'LandfillEff', 3, '90 - 95% c√°c b√£i ch√¥n l·∫•p ch·∫•t th·∫£i r·∫Øn sinh ho·∫°t t·∫°i c√°c ƒë√¥ th·ªã ƒë√£ ƒë√≥ng c·ª≠a ƒë∆∞·ª£c c·∫£i t·∫°o, x·ª≠ l√Ω, t√°i s·ª≠ d·ª•ng ƒë·∫•t.', 9, '6-9'),
      (40, 'LandfillEff', 4, 'T·∫•t c·∫£ c√°c b√£i ch√¥n l·∫•p ƒë∆∞·ª£c x√¢y d·ª±ng v√† v·∫≠n h√†nh theo ƒë√∫ng quy ƒë·ªãnh qu·∫£n l√Ω ch·∫•t th·∫£i r·∫Øn.', 12, '9-12'),
      (40, 'LandfillEff', 5, 'Kh√¥ng ƒë·∫ßu t∆∞ m·ªõi b√£i ch√¥n l·∫•p ƒë·ªÉ x·ª≠ l√Ω ch·∫•t th·∫£i r·∫Øn c√¥ng nghi·ªáp th√¥ng th∆∞·ªùng (tr·ª´ tr∆∞·ªùng h·ª£p ph√π h·ª£p v·ªõi n·ªôi dung qu·∫£n l√Ω ch·∫•t th·∫£i r·∫Øn trong c√°c quy ho·∫°ch c√≥ li√™n quan).', 15, '‚â•12'),
      (41, 'GHGIs', 1, '0', 3, '0'),
      (41, 'GHGIs', 2, '< 25%', 6, '0-25'),
      (41, 'GHGIs', 3, '25% - <50%', 9, '25-50'),
      (41, 'GHGIs', 4, '50% - >75%', 12, '50-75'),
      (41, 'GHGIs', 5, '‚â•75%', 15, '‚â•75');
    `);

    // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng DomainWeights
    await pool.query(`
      INSERT INTO DomainWeights (item_type, domain_id, item_code, weight) VALUES
      ('domain', 1, 'NƒÉng l∆∞·ª£ng & C√¥ng tr√¨nh xanh', 0.2),
      ('domain', 2, 'Quy ho·∫°ch ƒë√¥ th·ªã, ph·ªß xanh & ƒëa d·∫°ng sinh h·ªçc', 0.18),
      ('domain', 3, 'Giao th√¥ng ƒë√¥ th·ªã & ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠', 0.24),
      ('domain', 4, 'Qu·∫£n l√Ω n∆∞·ªõc', 0.19),
      ('domain', 5, 'Qu·∫£n l√Ω ch·∫•t th·∫£i', 0.19);
    `);

    // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng IndicatorWeights (corrected)
    await pool.query(`
      INSERT INTO IndicatorWeights (indicator_id, indicator_code, domain_id, weight_within_domain) VALUES
      (1, 'ENI_RWE', 1, 0.125),
      (2, 'SENIRE', 1, 0.125),
      (3, 'EI_Save', 1, 0.125),
      (4, 'EI_LR', 1, 0.125),
      (5, 'SLI', 1, 0.125),
      (6, 'GBpromo', 1, 0.125),
      (7, 'VNGBI', 1, 0.125),
      (8, 'R_CO2e', 2, 0.1429),
      (9, 'R_S_water', 2, 0.1429),
      (10, 'Rcover', 2, 0.1429),
      (11, 'Rland_p', 2, 0.1429),
      (12, 'UBI_PNRA', 2, 0.1429),
      (13, 'GISapp', 2, 0.1429),
      (14, 'DISaster', 2, 0.1429),
      (15, 'ClimateAct', 2, 0.1429),
      (16, 'NMT', 3, 0.1),
      (17, 'PT_c', 3, 0.1),
      (18, 'PT1000', 3, 0.1),
      (19, 'STL', 3, 0.1),
      (20, 'SRRW', 3, 0.1),
      (21, 'RoadCap', 3, 0.1),
      (22, 'AQstation', 3, 0.1),
      (23, 'AQdata', 3, 0.1),
      (24, 'CleanAirPlan', 3, 0.1),
      (25, 'AQI_TDE', 3, 0.1),
      (26, 'WImanage', 4, 0.125),
      (27, 'WI_loss', 4, 0.125),
      (28, 'WI_rr', 4, 0.125),
      (29, 'FloodRisk', 4, 0.125),
      (30, 'Ewater', 4, 0.125),
      (31, 'Ewwater', 4, 0.125),
      (32, 'DigWater', 4, 0.125),
      (33, 'R_USWA', 4, 0.125),
      (34, 'WasteInit', 5, 0.125),
      (35, 'R_USWA_waste', 5, 0.125),
      (36, 'RRWI', 5, 0.125),
      (37, 'ConsWaste', 5, 0.125),
      (38, 'WWT_I', 5, 0.125),
      (39, 'DigWaste', 5, 0.125),
      (40, 'LandfillEff', 5, 0.125),
      (41, 'GHGIs', 5, 0.125);
    `);

    // Ch√®n d·ªØ li·ªáu m·∫´u v√†o Assessments_Template (corrected)
    await pool.query(`
      INSERT INTO Assessments_Template (city, year, domain_id, indicator_id, indicator_code, value, unit_code, score_awarded, assessor, date, level, description)
      VALUES
      ('TP. H·ªì Ch√≠ Minh', 2025, 1, 1, 'ENI_RWE', '10', 'percent', 3, 'admin', CURRENT_DATE, 1, 'M√¥ t·∫£ M·ª©c 1 - c√≥ th·ªÉ ch·ªânh s·ª≠a'),
      ('TP. H·ªì Ch√≠ Minh', 2025, 1, 5, 'SLI', '12', 'percent or count', 4, 'admin', CURRENT_DATE, 2, 'M√¥ t·∫£ M·ª©c 2 - c√≥ th·ªÉ ch·ªânh s·ª≠a'),
      ('TP. H·ªì Ch√≠ Minh', 2025, 1, 6, 'GBpromo', '4', 'score', 4, 'admin', CURRENT_DATE, 2, 'H·ªá th·ªëng vƒÉn b·∫£n ph√°p lu·∫≠t v·ªÅ c√¥ng tr√¨nh xanh ƒë∆∞·ª£c ban h√†nh');
    `);

    // Ch√®n d·ªØ li·ªáu m·∫´u v√†o users
    await pool.query(`
      INSERT INTO users (username, password, role) VALUES
      ('admin', '${bcrypt.hashSync('admin', 10)}', 'admin'),
      ('user', '${bcrypt.hashSync('password', 10)}', 'user');
    `);

    dbInitialized = true;
    console.log('‚úÖ Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng.');
  } catch (err) {
    console.error('‚ùå L·ªói kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu:', err);
    throw err;
  }
}

// Middleware x√°c th·ª±c token
function authenticateToken(req, res, next) {
  const token = req.cookies.token;
  if (!token) return res.redirect('/?error=Vui l√≤ng ƒëƒÉng nh·∫≠p');
  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);
    req.user = user;
    next();
  } catch (err) {
    console.error('L·ªói x√°c th·ª±c token:', err);
    res.clearCookie('token');
    res.redirect('/?error=Token kh√¥ng h·ª£p l·ªá');
  }
}

// Middleware ki·ªÉm tra vai tr√≤
function checkRole(role) {
  return (req, res, next) => {
    if (req.user && req.user.role === role) {
      next();
    } else {
      res.redirect('/?error=Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
    }
  };
}

// L·∫•y GeoJSON
async function getGeoJSON(city = 'TP. H·ªì Ch√≠ Minh') {
  try {
    const result = await pool.query(`
      SELECT $1 AS city, 
             ST_AsGeoJSON(ST_SetSRID(ST_MakePoint(106.7009, 10.7769), 4326)) AS geojson
    `, [city]);
    return {
      type: 'FeatureCollection',
      features: result.rows.map((row) => ({
        type: 'Feature',
        geometry: JSON.parse(row.geojson),
        properties: { city: row.city },
      })),
    };
  } catch (err) {
    console.error('L·ªói l·∫•y GeoJSON:', err);
    return null;
  }
}

// Tuy·∫øn ƒë∆∞·ªùng GET /
app.get('/', async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'index.ejs');
    await fs.access(viewPath); // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa index.ejs
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private'); // NgƒÉn cache
    
    // L·∫•y year t·ª´ query ho·∫∑c m·∫∑c ƒë·ªãnh l√† nƒÉm hi·ªán t·∫°i
    const year = parseInt(req.query.year) || new Date().getFullYear();
    const city = 'TP. H·ªì Ch√≠ Minh';
    const cacheKey = `data:${city}:${year}`;
    
    // Truy v·∫•n d·ªØ li·ªáu t·ªïng h·ª£p
    const data = await getCachedOrQuery(cacheKey, `
      SELECT 
        city AS district,
        ROUND(AVG(score_awarded) / 1000 * 100, 1) || '%' AS khi_hau,
        ROUND(AVG(score_awarded), 0) || '/1000' AS diem,
        CASE 
          WHEN AVG(score_awarded) >= 800 THEN 'Level 5'
          WHEN AVG(score_awarded) >= 600 THEN 'Level 4'
          WHEN AVG(score_awarded) >= 400 THEN 'Level 3'
          WHEN AVG(score_awarded) >= 200 THEN 'Level 2'
          ELSE 'Level 1'
        END AS level
      FROM Assessments_Template
      WHERE city = '${city}' AND year = ${year}
      GROUP BY city
    `);
    
    // D·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB
    const sampleData = data.length > 0 ? data : [
      { district: 'TP. H·ªì Ch√≠ Minh', khi_hau: '87.5%', diem: '875/1000', level: 'Level 5' }
    ];
    
    res.render('index', {
      data: sampleData,
      error: req.query.error || null,
      success: req.query.success || null,
      selectedYear: year,
      years: [2023, 2024, 2025] // Danh s√°ch nƒÉm cho dropdown
    });
  } catch (err) {
    console.error('‚ùå L·ªói trong route g·ªëc:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang ch√≠nh ho·∫∑c l·ªói khi t·∫£i d·ªØ li·ªáu',
      success: null,
    });
  }
});

// Tuy·∫øn ƒë∆∞·ªùng GET /login
app.get('/login', async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'login.ejs');
    await fs.access(viewPath);
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    res.render('login', {
      error: req.query.error || null,
      success: req.query.success || null,
    });
  } catch (err) {
    console.error('‚ùå T·ªáp login.ejs kh√¥ng t·ªìn t·∫°i:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang ƒëƒÉng nh·∫≠p',
      success: null,
    });
  }
});

// Tuy·∫øn ƒë∆∞·ªùng GET /register
app.get('/register', async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'register.ejs');
    await fs.access(viewPath);
    res.render('register', {
      error: req.query.error || null,
      success: req.query.success || null,
    });
  } catch (err) {
    console.error('‚ùå T·ªáp register.ejs kh√¥ng t·ªìn t·∫°i:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang ƒëƒÉng k√Ω',
      success: null,
    });
  }
});

// Tuy·∫øn ƒë∆∞·ªùng GET /index
app.get('/index', async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'index.ejs');
    await fs.access(viewPath);
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    
    // L·∫•y year t·ª´ query ho·∫∑c m·∫∑c ƒë·ªãnh l√† nƒÉm hi·ªán t·∫°i
    const year = parseInt(req.query.year) || new Date().getFullYear();
    const city = 'TP. H·ªì Ch√≠ Minh';
    const cacheKey = `data:${city}:${year}`;
    
    // Truy v·∫•n d·ªØ li·ªáu t·ªïng h·ª£p
    const data = await getCachedOrQuery(cacheKey, `
      SELECT 
        city AS district,
        ROUND(AVG(score_awarded) / 1000 * 100, 1) || '%' AS khi_hau,
        ROUND(AVG(score_awarded), 0) || '/1000' AS diem,
        CASE 
          WHEN AVG(score_awarded) >= 800 THEN 'Level 5'
          WHEN AVG(score_awarded) >= 600 THEN 'Level 4'
          WHEN AVG(score_awarded) >= 400 THEN 'Level 3'
          WHEN AVG(score_awarded) >= 200 THEN 'Level 2'
          ELSE 'Level 1'
        END AS level
      FROM Assessments_Template
      WHERE city = '${city}' AND year = ${year}
      GROUP BY city
    `);
    
    // D·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ DB
    const sampleData = data.length > 0 ? data : [
      { district: 'TP. H·ªì Ch√≠ Minh', khi_hau: '87.5%', diem: '875/1000', level: 'Level 5' }
    ];
    
    res.render('index', {
      data: sampleData,
      error: req.query.error || null,
      success: req.query.success || null,
      selectedYear: year,
      years: [2023, 2024, 2025]
    });
  } catch (err) {
    console.error('‚ùå T·ªáp index.ejs kh√¥ng t·ªìn t·∫°i:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang ch√≠nh ho·∫∑c l·ªói khi t·∫£i d·ªØ li·ªáu',
      success: null,
    });
  }
});

// Tuy·∫øn ƒë∆∞·ªùng GET /edit_cndl
app.get('/edit_cndl', authenticateToken, (req, res) => {
  res.redirect('/qldl');
});

app.post('/register', [
  body('username').trim().notEmpty().withMessage('T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('password').notEmpty().withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.redirect(`/register?error=${encodeURIComponent(errors.array()[0].msg)}`);
  }

  const { username, password } = req.body;
  try {
    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
    if (result.rows.length > 0) {
      return res.redirect('/register?error=T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i');
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    await pool.query('INSERT INTO users (username, password, role) VALUES ($1, $2, $3)', [username, hashedPassword, 'user']);
    res.redirect('/?success=ƒêƒÉng k√Ω th√†nh c√¥ng, vui l√≤ng ƒëƒÉng nh·∫≠p');
  } catch (err) {
    console.error('L·ªói POST /register:', err);
    res.redirect('/register?error=L·ªói khi ƒëƒÉng k√Ω');
  }
});

app.get('/index', authenticateToken, (req, res) => {
  res.redirect('/dashboard');
});

app.get('/edit_cndl', authenticateToken, (req, res) => {
  res.redirect('/qldl');
});

app.post(
  '/login',
  [
    body('username').trim().notEmpty().withMessage('T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
    body('password').notEmpty().withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.redirect(`/?error=${encodeURIComponent(errors.array()[0].msg)}`);
    }

    const { username, password } = req.body;
    try {
      const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
      if (result.rows.length === 0) {
        return res.redirect('/?error=Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
      }

      const user = result.rows[0];
      if (!bcrypt.compareSync(password, user.password)) {
        return res.redirect('/?error=M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
      }

      const token = jwt.sign({ username: user.username, role: user.role }, process.env.JWT_SECRET, {
        expiresIn: '24h', // TƒÉng th·ªùi gian s·ªëng token t·ª´ 1h l√™n 24h
      });
      res.cookie('token', token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' });
      res.redirect('/dashboard');
    } catch (err) {
      console.error('L·ªói POST /login:', err);
      res.redirect('/?error=ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    }
  }
);

app.get('/dashboard', authenticateToken, async (req, res) => {
  try {
    const user = req.user;
    const year = parseInt(req.query.year) || new Date().getFullYear();
    const city = 'TP. H·ªì Ch√≠ Minh';

    const domains = await getCachedOrQuery('domains', 'SELECT * FROM Domains ORDER BY domain_id');
    const indicators = await getCachedOrQuery('indicators', 'SELECT * FROM Indicators ORDER BY domain_id, indicator_id');

    const assessmentsRes = await pool.query(
      `
      SELECT a.*, d.name AS domain_name, i.name AS indicator_name
      FROM Assessments_Template a
      JOIN Domains d ON a.domain_id = d.domain_id
      JOIN Indicators i ON a.indicator_id = i.indicator_id
      WHERE a.city = $1 AND a.year = $2
      ORDER BY a.domain_id, a.indicator_id
      `,
      [city, year]
    );
    const assessments = assessmentsRes.rows;

    const domainScores = {};
    domains.forEach((domain) => {
      const domainAssessments = assessments.filter((a) => a.domain_id === domain.domain_id);
      domainScores[domain.domain_id] = domainAssessments.reduce((sum, a) => sum + (a.score_awarded || 0), 0);
    });

    const totalScore = Object.values(domainScores).reduce((sum, score) => sum + score, 0);
    const totalMaxScore = domains.reduce((sum, d) => sum + (d.max_score || 0), 0);
    const overallLevel = Math.min(5, Math.ceil((totalScore / totalMaxScore) * 5));

    const geojson = await getGeoJSON(city);

    // L·∫•y danh s√°ch nƒÉm
    const yearsRes = await pool.query(
      'SELECT DISTINCT year FROM Assessments_Template WHERE city = $1 ORDER BY year DESC',
      [city]
    );
    const years = yearsRes.rows.map(row => row.year);

    res.render('dashboard', {
      user,
      domains,
      indicators,
      assessments,
      domainScores,
      totalScore,
      overallLevel,
      geojson,
      years,
      selectedYear: year,
      error: req.query.error || null,
      success: req.query.success || null,
    });
  } catch (err) {
    console.error('L·ªói GET /dashboard:', err.message, err.stack);
    res.render('dashboard', {
      user: req.user,
      domains: [],
      indicators: [],
      assessments: [],
      domainScores: {},
      totalScore: 0,
      overallLevel: 1,
      geojson: null,
      years: [],
      selectedYear: null,
      error: 'L·ªói khi l·∫•y d·ªØ li·ªáu dashboard',
      success: null,
    });
  }
});

// H√†m parseRecipe ƒë·ªÉ ph√¢n t√≠ch recipe_description
function parseRecipe(recipe) {
  if (!recipe) return [];
  try {
    return recipe.split(',').map(param => param.trim());
  } catch {
    return [];
  }
}

// H√†m evaluateFormula s·ª≠ d·ª•ng mathjs
function evaluateFormula(formula, value, additionalParams = {}) {
  try {
    const numValue = parseFloat(value);
    if (isNaN(numValue)) {
      console.warn(`Gi√° tr·ªã kh√¥ng h·ª£p l·ªá: ${value}`);
      return 0;
    }

    // C√°c c√¥ng th·ª©c kh√¥ng c·∫ßn t√≠nh to√°n
    const qualitativeFormulas = [
      'Qualitative/score by policy',
      'Scale 1-5',
      'Data availability & integration',
      'Existence and quality of plan',
      'Composite',
      'Count density',
      'Number of days AQI > threshold',
      'Digitalization level',
      'Number/quality of initiatives',
      'Operational efficiency',
      'GHG reduction measures',
      'Level of service'
    ];

    if (qualitativeFormulas.includes(formula)) {
      return numValue;
    }

    if (formula.includes('value *')) {
      const multiplier = parseFloat(formula.split('value *')[1].trim());
      if (isNaN(multiplier)) throw new Error('H·ªá s·ªë nh√¢n kh√¥ng h·ª£p l·ªá');
      return numValue * multiplier;
    } else if (formula.includes('100 - value')) {
      return 100 - numValue;
    } else if (formula.includes('avg(')) {
      const params = formula.match(/avg\(([^)]+)\)/)[1].split(',').map(p => p.trim());
      const values = params.map(param => parseFloat(additionalParams[param] || numValue));
      if (values.some(v => isNaN(v))) throw new Error('Tham s·ªë kh√¥ng h·ª£p l·ªá cho h√†m avg');
      return values.reduce((sum, val) => sum + val, 0) / values.length;
    } else {
      let evalFormula = formula;
      for (const [key, val] of Object.entries(additionalParams)) {
        if (!/^\d+(\.\d*)?$/.test(val)) throw new Error(`Gi√° tr·ªã kh√¥ng h·ª£p l·ªá cho tham s·ªë ${key}`);
        evalFormula = evalFormula.replace(new RegExp(`\\b${key}\\b`, 'g'), val);
      }
      evalFormula = evalFormula.replace('value', numValue.toString());
      const result = math.evaluate(evalFormula);
      if (typeof result !== 'number' || isNaN(result)) throw new Error('K·∫øt qu·∫£ c√¥ng th·ª©c kh√¥ng h·ª£p l·ªá');
      return result;
    }
  } catch (err) {
    console.error(`L·ªói x·ª≠ l√Ω c√¥ng th·ª©c "${formula}": ${err.message}`);
    return parseFloat(value) || 0;
  }
}

// H√†m parseRecipe ƒë·ªÉ ph√¢n t√≠ch recipe_description
function parseRecipe(recipe) {
  if (!recipe) return [];
  try {
    return recipe.split(',').map(param => param.trim());
  } catch (err) {
    console.error('L·ªói parseRecipe:', err.message);
    return [];
  }
}

// Route GET /cndl
app.get('/cndl', authenticateToken, async (req, res) => {
  try {
    const user = req.user;
    const year = parseInt(req.query.year) || new Date().getFullYear();
    const city = 'TP. H·ªì Ch√≠ Minh';

    // T·ªëi ∆∞u h√≥a truy v·∫•n: L·∫•y domains v√† indicators c√πng l√∫c
    const [domainsRes, indicatorsRes, assessmentsRes] = await Promise.all([
      pool.query('SELECT * FROM Domains ORDER BY domain_id'),
      pool.query(`
        SELECT i.*, COALESCE(i.recipe_description, '') AS recipe_description
        FROM Indicators i
        ORDER BY domain_id, indicator_id
      `),
      pool.query(
        'SELECT indicator_code, value FROM Assessments_Template WHERE city = $1 AND year = $2',
        [city, year]
      )
    ]);

    const domains = domainsRes.rows || [];
    const indicators = indicatorsRes.rows.map(ind => ({
      ...ind,
      variables: parseRecipe(ind.recipe_description), // S·ª≠ d·ª•ng parseRecipe
      existing_value: assessmentsRes.rows.find(a => a.indicator_code === ind.code)?.value || null
    })) || [];

    const domainsWithIcons = domains.map(domain => ({
      ...domain,
      icon: domain.icon || getDefaultIcon(domain.domain_id)
    }));

    function getDefaultIcon(domainId) {
      const iconMap = {
        1: 'fas fa-bolt', // NƒÉng l∆∞·ª£ng
        2: 'fas fa-leaf', // M√¥i tr∆∞·ªùng
        3: 'fas fa-car', // Giao th√¥ng
        4: 'fas fa-tint', // N∆∞·ªõc
        5: 'fas fa-trash' // Ch·∫•t th·∫£i
      };
      return iconMap[domainId] || 'fas fa-cog';
    }

    res.render('cndl', {
      user,
      city,
      domains: domainsWithIcons,
      indicators,
      year,
      error: req.query.error || null,
      success: req.query.success || null
    });
  } catch (err) {
    console.error('L·ªói GET /cndl:', err.message, err.stack);
    res.render('cndl', {
      user: req.user,
      city: 'TP. H·ªì Ch√≠ Minh',
      domains: [],
      indicators: [],
      year: new Date().getFullYear(),
      error: 'L·ªói khi t·∫£i d·ªØ li·ªáu: ' + err.message,
      success: null
    });
  }
});

app.post(
  '/cndl',
  authenticateToken,
  checkRole('admin'),
  [
    body('year').isInt({ min: 2000, max: 2100 }).withMessage('NƒÉm ph·∫£i t·ª´ 2000 ƒë·∫øn 2100'),
    body('*.params.*')
      .optional()
      .trim()
      .customSanitizer(value => {
        let sanitized = value.replace(',', '.').replace(/[^\d.]/g, '');
        if ((sanitized.match(/\./g) || []).length > 1) return '';
        return sanitized;
      })
      .matches(/^\d+(\.\d*)?$/)
      .withMessage('Tham s·ªë b·ªï sung ph·∫£i l√† s·ªë d∆∞∆°ng')
      .custom(value => {
        if (value.startsWith('-')) throw new Error('Tham s·ªë b·ªï sung ph·∫£i l√† s·ªë d∆∞∆°ng');
        return true;
      }),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('L·ªói validation:', errors.array());
      const errorMsg = errors.array().map(err => `${err.param}: ${err.msg}`).join('; ');
      return res.redirect(`/cndl?error=${encodeURIComponent(errorMsg)}`);
    }

    try {
      const year = req.body.year || new Date().getFullYear();
      const city = req.body.city || 'TP. H·ªì Ch√≠ Minh';
      const assessor = req.user.username;
      const ip = req.ip;
      const userAgent = req.get('User-Agent');

      console.log('Request body:', req.body); // Log for debugging

      const indicatorCodes = [
        'ENI_RWE', 'SENIRE', 'EI_Save', 'EI_LR', 'SLI', 'GBpromo', 'VNGBI', 'R_CO2e',
        'R_S_water', 'Rcover', 'Rland_p', 'UBI_PNRA', 'GISapp', 'DISaster', 'ClimateAct',
        'NMT', 'PT_c', 'PT1000', 'STL', 'SRRW', 'RoadCap', 'AQstation', 'AQdata', 'CleanAirPlan', 'AQI_TDE',
        'WImanage', 'WI_loss', 'WI_rr', 'FloodRisk', 'Ewater', 'Ewwater', 'DigWater', 'R_USWA',
        'WasteInit', 'R_USWA_waste', 'RRWI', 'ConsWaste', 'WWT_I', 'DigWaste', 'LandfillEff', 'GHGIs'
      ];

      // üîπ ƒê·ªãnh nghƒ©a c√¥ng th·ª©c t√≠nh
      const formulas = {
        'ENI_RWE': (p) => ((p.E_RE - p['L_AT&C']) / p.EC * 100 + p.P_RE / p.P_total * 100) || 0,
        'SENIRE': (p) => (p.SE_RE / p.ES * 100) || 0,
        'EI_Save': (p) => (p.E_Save / p.E_C * 100) || 0,
        'EI_LR': (p) => (p.E_delivered / p.E_input * 100) || 0,
        'SLI': (p) => ((p.SL_e + p.SL_s) / p.SL * 100) || 0,
        'GBpromo': (p) => parseFloat(p.GBpromo) || 0,
        'VNGBI': (p) => ((p.B_P + p.B_AC) / (p.S_GB / p.S_BC) * 100) || 0,
        'R_CO2e': (p) => ((p.CO2eb - p.CO2et) / p.CO2eb * 100) || 0,
        'R_S_water': (p) => ((p.S_water_present + p.S_op_present) / (p.S_water_plan + p.S_op_plan) * 100) || 0,
        'Rcover': (p) => ((p.S_pp / p.P) / 12 * 100) || 0,
        'Rland_p': (p) => (p.S_land_p / p.S_total_land * 100) || 0,
        'UBI_PNRA': (p) => ((p.A_natural + p.A_restored) / p.A_city * 100) || 0,
        'GISapp': (p) => parseFloat(p.GISapp) || 0,
        'DISaster': (p) => parseFloat(p.DISaster) || 0,
        'ClimateAct': (p) => parseFloat(p.ClimateAct) || 0,
        'NMT': (p) => (p.NMT_L / p.L_R * 100) || 0,
        'PT_c': (p) => (p.PT_c / p.PT * 100) || 0,
        'PT1000': (p) => (p.PT_F * 1000 / p.P) || 0,
        'STL': (p) => (p.STL_S / p.TL * 100) || 0,
        'SRRW': (p) => (p.SRRW_L / p.TSR * 100) || 0,
        'RoadCap': (p) => parseFloat(p.RoadCap) || 0,
        'AQstation': (p) => (p.AQstation / p.A_city) || 0,
        'AQdata': (p) => parseFloat(p.AQdata) || 0,
        'CleanAirPlan': (p) => parseFloat(p.CleanAirPlan) || 0,
        'AQI_TDE': (p) => parseFloat(p.AQI_exceed_days) || 0,
        'WImanage': (p) => parseFloat(p.WImanage) || 0,
        'WI_loss': (p) => ((p.W_P - p.W_S) / p.W_P * 100) || 0,
        'WI_rr': (p) => (p.W_rr / p.W_s * 100) || 0,
        'FloodRisk': (p) => parseFloat(p.FloodRisk) || 0,
        'Ewater': (p) => parseFloat(p.Ewater) || 0,
        'Ewwater': (p) => parseFloat(p.Ewwater) || 0,
        'DigWater': (p) => parseFloat(p.DigWater) || 0,
        'R_USWA': (p) => (p.P_W / p.P_S * 100) || 0,
        'WasteInit': (p) => parseFloat(p.Waste_Init) || 0,
        'R_USWA_waste': (p) => (p.W_landfill / p.W_waste_generate * 100) || 0,
        'RRWI': (p) => ((p.W_RU + p.W_RRC) / p.W_G * 100) || 0,
        'ConsWaste': (p) => ((p.W_Cons_deli_cp + p.W_Cons_rr + p.W_Cons_deli_reduce) / p.W_Cons * 100) || 0,
        'WWT_I': (p) => (p.W_T / p.W_G * 100) || 0,
        'DigWaste': (p) => parseFloat(p.DigWaste) || 0,
        'LandfillEff': (p) => parseFloat(p.LandfillEff) || 0,
        'GHGIs': (p) => (parseFloat(p.GHGs_Landfill) || 0) + (parseFloat(p.GHGs_WTE) || 0) + (parseFloat(p.GHGs_Recycling) || 0) + (parseFloat(p.GHGs_Composting) || 0)
      };

      for (const indicator_code of indicatorCodes) {
        if (!req.body[indicator_code]) {
          console.warn(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ch·ªâ s·ªë ${indicator_code}`);
          continue;
        }
        const data = req.body[indicator_code];
        const params = data.params || {};

        // Validate params
        for (const [key, value] of Object.entries(params)) {
          if (!value || isNaN(parseFloat(value)) || parseFloat(value) < 0) {
            console.warn(`Tham s·ªë kh√¥ng h·ª£p l·ªá: ${indicator_code}.${key} = ${value}`);
            return res.redirect(`/cndl?error=${encodeURIComponent(`Tham s·ªë ${indicator_code}.${key} kh√¥ng h·ª£p l·ªá`)}`);
          }
        }

        const indicatorRes = await pool.query(
          'SELECT indicator_id, domain_id, unit_code FROM Indicators WHERE code = $1',
          [indicator_code]
        );
        if (indicatorRes.rows.length === 0) {
          console.warn(`Kh√¥ng t√¨m th·∫•y ch·ªâ s·ªë ${indicator_code} trong b·∫£ng Indicators`);
          continue;
        }
        const { indicator_id, domain_id, unit_code } = indicatorRes.rows[0];

        let value;
        try {
          value = formulas[indicator_code](params);
          if (isNaN(value) || value === undefined) {
            console.warn(`Gi√° tr·ªã kh√¥ng h·ª£p l·ªá cho ${indicator_code}, params:`, params);
            value = 0;
          }
        } catch (err) {
          console.error(`L·ªói khi t√≠nh ch·ªâ s·ªë ${indicator_code}:`, err.message);
          value = 0;
        }

        if (unit_code === 'percent' && (value < 0 || value > 100)) {
          console.warn(`Gi√° tr·ªã cho ${indicator_code} ph·∫£i t·ª´ 0-100%, nh·∫≠n ƒë∆∞·ª£c: ${value}`);
          value = Math.max(0, Math.min(100, value));
        }

        const levelsRes = await pool.query(
          'SELECT criteria, level, score_value, description FROM ScoringLevels WHERE indicator_code = $1',
          [indicator_code]
        );
        let selectedLevel = { level: 'Kh√¥ng x√°c ƒë·ªãnh', score_value: 0, description: 'Kh√¥ng c√≥ m√¥ t·∫£' };
        for (const level of levelsRes.rows) {
          const { min_value, max_value } = parseRange(level.criteria);
          if ((min_value === null || value >= min_value) && (max_value === null || value <= max_value)) {
            selectedLevel = { level: level.level, score_value: level.score_value, description: level.description };
            break;
          }
        }

        const oldQuery = await pool.query(
          'SELECT value, score_awarded, level, description FROM Assessments_Template WHERE city = $1 AND year = $2 AND indicator_code = $3',
          [city, year, indicator_code]
        );
        const oldValues = oldQuery.rows[0] || null;

        await pool.query(
          `INSERT INTO Assessments_Template (city, year, domain_id, indicator_id, indicator_code, value, unit_code, score_awarded, assessor, date, level, description)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_DATE, $10, $11)
           ON CONFLICT (city, year, indicator_code) DO UPDATE SET 
             value = EXCLUDED.value, 
             unit_code = EXCLUDED.unit_code,
             score_awarded = EXCLUDED.score_awarded, 
             assessor = EXCLUDED.assessor, 
             date = CURRENT_DATE, 
             level = EXCLUDED.level, 
             description = EXCLUDED.description`,
          [
            city,
            year,
            domain_id,
            indicator_id,
            indicator_code,
            value,
            unit_code,
            selectedLevel.score_value,
            assessor,
            selectedLevel.level,
            selectedLevel.description
          ]
        );

        await pool.query(
          `INSERT INTO edit_history (table_name, record_id, old_values, new_values, changed_by, change_type, ip_address, user_agent, timestamp)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP)`,
          [
            'Assessments_Template',
            `${city}_${year}_${indicator_code}`,
            oldValues ? JSON.stringify(oldValues) : null,
            JSON.stringify({
              value,
              score_awarded: selectedLevel.score_value,
              level: selectedLevel.level,
              description: selectedLevel.description
            }),
            assessor,
            oldValues ? 'update' : 'insert',
            ip,
            userAgent
          ]
        );
      }

      res.redirect(`/dashboard?year=${year}&success=${encodeURIComponent('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng')}`);
    } catch (err) {
      console.error('L·ªói POST /cndl:', err.message);
      res.redirect(`/cndl?error=${encodeURIComponent(`L·ªói khi l∆∞u d·ªØ li·ªáu: ${err.message}`)}`);
    }
  }
);
// Route POST /cndl/preview
app.post('/cndl/preview', authenticateToken, checkRole('admin'), async (req, res) => {
  try {
    const { indicatorCode, params, year, city } = req.body;

    // Ki·ªÉm tra ch·ªâ s·ªë h·ª£p l·ªá
    if (!formulas[indicatorCode]) {
      return res.status(400).json({ message: 'Ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá' });
    }

    // T√≠nh gi√° tr·ªã ch·ªâ s·ªë
    let value;
    try {
      value = formulas[indicatorCode](params);
    } catch (err) {
      console.error(`L·ªói t√≠nh to√°n ${indicatorCode}:`, err.message);
      value = 0;
    }

    // L·∫•y unit_code t·ª´ b·∫£ng Indicators
    const indicatorRes = await pool.query(
      'SELECT unit_code FROM Indicators WHERE code = $1',
      [indicatorCode]
    );
    const unit_code = indicatorRes.rows[0]?.unit_code || 'unknown';

    // Gi·ªõi h·∫°n gi√° tr·ªã ph·∫ßn trƒÉm n·∫øu c·∫ßn
    if (unit_code === 'percent') {
      value = Math.max(0, Math.min(100, value));
    }

    // X√°c ƒë·ªãnh level, score, description t·ª´ ScoringLevels
    const levelsRes = await pool.query(
      'SELECT criteria, level, score_value, description FROM ScoringLevels WHERE indicator_code = $1',
      [indicatorCode]
    );
    let selectedLevel = { level: 'Kh√¥ng x√°c ƒë·ªãnh', score_value: 0, description: 'Kh√¥ng c√≥ m√¥ t·∫£' };
    for (const level of levelsRes.rows) {
      const { min_value, max_value } = parseRange(level.criteria);
      if ((min_value === null || value >= min_value) && (max_value === null || value <= max_value)) {
        selectedLevel = { level: level.level, score_value: level.score_value, description: level.description };
        break;
      }
    }

    res.json({
      value: value.toFixed(2), // L√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n
      level: selectedLevel.level,
      score: selectedLevel.score_value,
      description: selectedLevel.description
    });
  } catch (err) {
    console.error('L·ªói POST /cndl/preview:', err.message);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß khi t√≠nh to√°n preview' });
  }
});
// Endpoint GET /edit_cndl/:id
app.get('/edit_cndl/:id', authenticateToken, async (req, res) => {
  console.log(`‚úÖ Truy c·∫≠p /edit_cndl/${req.params.id}`);
  try {
    const result = await pool.query(
      `
      SELECT a.*, d.name AS domain_name, i.name AS indicator_name, i.code AS indicator_code
      FROM Assessments_Template a
      JOIN Domains d ON a.domain_id = d.domain_id
      JOIN Indicators i ON a.indicator_id = i.indicator_id
      WHERE a.assessment_id = $1
      `,
      [req.params.id]
    );
    const item = result.rows[0];
    if (!item) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£n ghi v·ªõi assessment_id: ${req.params.id}`);
      return res.render('edit_cndl', {
        table: 'Assessments_Template',
        item: null,
        fields: [],
        geojson: null,
        user: req.user,
        error: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªÉ s·ª≠a',
        success: null
      });
    }

    // Define fields to display in the form
    const fields = ['city', 'year', 'indicator_code', 'value', 'unit_code', 'score_awarded', 'assessor'];
    const geojson = await getGeoJSON(item.city);

    res.render('edit_cndl', {
      table: 'Assessments_Template',
      item,
      fields,
      geojson,
      user: req.user,
      error: req.query.error || null,
      success: req.query.success || null
    });
  } catch (err) {
    console.error('‚ùå L·ªói GET /edit_cndl:', err.message, err.stack);
    res.render('edit_cndl', {
      table: 'Assessments_Template',
      item: null,
      fields: [],
      geojson: null,
      user: req.user,
      error: 'L·ªói khi t·∫£i d·ªØ li·ªáu',
      success: null
    });
  }
});

app.post(
  '/edit_cndl/:id',
  authenticateToken,
  [
    body('value')
      .trim()
      .notEmpty()
      .customSanitizer((value) => value.replace(',', '.').replace(/[^\d.]/g, ''))
      .matches(/^\d+(\.\d*)?$/)
      .withMessage('Gi√° tr·ªã ch·ªâ s·ªë ph·∫£i l√† s·ªë d∆∞∆°ng, v√≠ d·ª•: 45 ho·∫∑c 45.5')
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.warn('‚ö†Ô∏è L·ªói validation /edit_cndl:', errors.array());
      return res.redirect(`/edit_cndl/${req.params.id}?error=${encodeURIComponent(errors.array()[0].msg)}`);
    }

    const { value } = req.body;
    const id = req.params.id;
    try {
      const oldQuery = await pool.query(
        `
        SELECT value, score_awarded
        FROM Assessments_Template
        WHERE assessment_id = $1
        `,
        [id]
      );
      if (oldQuery.rows.length === 0) {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£n ghi v·ªõi assessment_id: ${id}`);
        return res.redirect(`/edit_cndl/${id}?error=${encodeURIComponent('Kh√¥ng t√¨m th·∫•y m·ª•c')}`);
      }

      const oldValues = oldQuery.rows[0];
      const indicatorRes = await pool.query(
        `
        SELECT i.indicator_id, i.code, i.formula, i.unit_code
        FROM Assessments_Template a
        JOIN Indicators i ON a.indicator_id = i.indicator_id
        WHERE a.assessment_id = $1
        `,
        [id]
      );
      const indicator = indicatorRes.rows[0];

      let calculatedValue = parseFloat(value);
      if (isNaN(calculatedValue)) {
        return res.redirect(`/edit_cndl/${id}?error=${encodeURIComponent('Gi√° tr·ªã kh√¥ng h·ª£p l·ªá')}`);
      }
      if (indicator.unit_code === 'percent' && (calculatedValue < 0 || calculatedValue > 100)) {
        return res.redirect(`/edit_cndl/${id}?error=${encodeURIComponent('Gi√° tr·ªã ph·∫£i t·ª´ 0-100%')}`);
      }

      let calculatedScore = 0;
      try {
        calculatedScore = evaluateFormula(indicator.formula, calculatedValue);
      } catch (err) {
        console.error(`‚ùå L·ªói t√≠nh c√¥ng th·ª©c cho ${indicator.code}:`, err.message);
        calculatedScore = calculatedValue;
      }

      const scoreRes = await pool.query(
        `
        SELECT level, score_value, description
        FROM ScoringLevels
        WHERE indicator_id = $1 AND $2 >= min_value AND $2 <= max_value
        `,
        [indicator.indicator_id, calculatedValue]
      );
      const levelData = scoreRes.rows[0] || { level: 1, score_value: 0, description: 'Kh√¥ng c√≥ m√¥ t·∫£' };

      const newValues = { value, level: levelData.level, score_awarded: levelData.score_value || Math.round(calculatedScore), description: levelData.description };
      await pool.query(
        `
        UPDATE Assessments_Template
        SET value = $1, score_awarded = $2, date = CURRENT_DATE, assessor = $3
        WHERE assessment_id = $4
        `,
        [value, levelData.score_value || Math.round(calculatedScore), req.user.username, id]
      );

      await pool.query(
        `
        INSERT INTO edit_history (table_name, record_id, old_values, new_values, changed_by, change_type, ip_address, user_agent)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        `,
        ['Assessments_Template', id, JSON.stringify(oldValues), JSON.stringify(newValues), req.user.username, 'update', req.ip, req.get('User-Agent')]
      );

      res.redirect(`/dashboard?success=${encodeURIComponent('C·∫≠p nh·∫≠t th√†nh c√¥ng')}`);
    } catch (err) {
      console.error('‚ùå L·ªói POST /edit_cndl:', err.message, err.stack);
      res.redirect(`/edit_cndl/${id}?error=${encodeURIComponent('L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu')}`);
    }
  }
);
// Tuy·∫øn ƒë∆∞·ªùng GET /total-score
app.get('/total-score', authenticateToken, async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'total-score.ejs');
    await fs.access(viewPath);
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    
    const year = parseInt(req.query.year) || new Date().getFullYear();
    const city = 'TP. H·ªì Ch√≠ Minh';
    const cacheKey = `total-score:${city}:${year}`;
    
    const data = await getCachedOrQuery(cacheKey, `
      SELECT 
        city AS district,
        ROUND(AVG(score_awarded) / 1000 * 100, 1) || '%' AS khi_hau,
        ROUND(AVG(score_awarded), 0) || '/1000' AS diem,
        CASE 
          WHEN AVG(score_awarded) >= 800 THEN 'Level 5'
          WHEN AVG(score_awarded) >= 600 THEN 'Level 4'
          WHEN AVG(score_awarded) >= 400 THEN 'Level 3'
          WHEN AVG(score_awarded) >= 200 THEN 'Level 2'
          ELSE 'Level 1'
        END AS level
      FROM Assessments_Template
      WHERE city = '${city}' AND year = ${year}
      GROUP BY city
    `);
    
    const updateDaysQuery = await pool.query(`
      SELECT COUNT(DISTINCT date) AS update_days
      FROM Assessments_Template
      WHERE city = '${city}' AND year = ${year}
    `);
    const updateDays = updateDaysQuery.rows[0]?.update_days || 0;
    
    const sampleData = data.length > 0 ? data : [
      { district: 'TP. H·ªì Ch√≠ Minh', khi_hau: '87.5%', diem: '875/1000', level: 'Level 5' }
    ];
    
    res.render('total-score', {
      data: sampleData,
      user: req.user,
      error: req.query.error || null,
      success: req.query.success || null,
      selectedYear: year,
      years: [2023, 2024, 2025],
      updateDays
    });
  } catch (err) {
    console.error('‚ùå L·ªói trong route /total-score:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang t·ªïng ƒëi·ªÉm ho·∫∑c l·ªói khi t·∫£i d·ªØ li·ªáu',
      success: null,
    });
  }
});
// Tuy·∫øn ƒë∆∞·ªùng GET /forgot-password
app.get('/forgot-password', async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'forgot-password.ejs');
    await fs.access(viewPath);
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    res.render('forgot-password', {
      error: req.query.error || null,
      success: req.query.success || null
    });
  } catch (err) {
    console.error('‚ùå T·ªáp forgot-password.ejs kh√¥ng t·ªìn t·∫°i:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang qu√™n m·∫≠t kh·∫©u',
      success: null
    });
  }
});

// Tuy·∫øn ƒë∆∞·ªùng POST /forgot-password (t√πy ch·ªçn, ƒë·ªÉ x·ª≠ l√Ω form)
app.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;
    // Ki·ªÉm tra email trong c∆° s·ªü d·ªØ li·ªáu (gi·∫£ ƒë·ªãnh b·∫£ng Users)
    const result = await pool.query('SELECT * FROM Users WHERE email = $1', [email]);
    if (result.rows.length === 0) {
      return res.redirect('/forgot-password?error=Email kh√¥ng t·ªìn t·∫°i');
    }
    // TODO: Th√™m logic g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (d√πng nodemailer)
    res.redirect('/forgot-password?success=Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i');
  } catch (err) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u:', err.message);
    res.redirect('/forgot-password?error=C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
  }
});
// Tuy·∫øn ƒë∆∞·ªùng GET /reset-password
app.get('/reset-password', async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'reset-password.ejs');
    await fs.access(viewPath);
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    
    const { token } = req.query;
    if (!token) {
      return res.redirect('/forgot-password?error=Token kh√¥ng h·ª£p l·ªá');
    }

    // X√°c minh token
    try {
      jwt.verify(token, process.env.JWT_SECRET);
      res.render('reset-password', {
        error: null,
        success: null,
        token
      });
    } catch (err) {
      return res.redirect('/forgot-password?error=Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
  } catch (err) {
    console.error('‚ùå T·ªáp reset-password.ejs kh√¥ng t·ªìn t·∫°i:', err.message);
    res.status(500).render('error', {
      error: 'Kh√¥ng t√¨m th·∫•y trang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
      success: null
    });
  }
});

// Tuy·∫øn ƒë∆∞·ªùng POST /reset-password
app.post('/reset-password', async (req, res) => {
  try {
    const { token, password, 'confirm-password': confirmPassword } = req.body;
    
    if (!token) {
      return res.redirect('/forgot-password?error=Token kh√¥ng h·ª£p l·ªá');
    }
    
    if (password !== confirmPassword) {
      return res.redirect(`/reset-password?token=${token}&error=M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp`);
    }

    // X√°c minh token
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (err) {
      return res.redirect('/forgot-password?error=Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // Ki·ªÉm tra email trong c∆° s·ªü d·ªØ li·ªáu
    const { email } = decoded;
    const result = await pool.query('SELECT * FROM Users WHERE email = $1', [email]);
    if (result.rows.length === 0) {
      return res.redirect('/forgot-password?error=Email kh√¥ng t·ªìn t·∫°i');
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(password, 10);
    await pool.query('UPDATE Users SET password = $1 WHERE email = $2', [hashedPassword, email]);

    res.redirect('/login?success=M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng');
  } catch (err) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', err.message);
    res.redirect(`/reset-password?token=${req.body.token || ''}&error=C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i`);
  }
});
// Endpoint GET /qldl
app.get('/qldl', authenticateToken, checkRole('admin'), async (req, res) => {
  try {
    const user = req.user;
    const year = parseInt(req.query.year) || new Date().getFullYear();
    const city = 'TP. H·ªì Ch√≠ Minh';

    const assessmentsRes = await pool.query(
      `
      SELECT a.*, d.name AS domain_name, i.name AS indicator_name
      FROM Assessments_Template a
      JOIN Domains d ON a.domain_id = d.domain_id
      JOIN Indicators i ON a.indicator_id = i.indicator_id
      WHERE a.city = $1 AND a.year = $2
      ORDER BY a.year DESC, a.domain_id, a.indicator_id
      `,
      [city, year]
    );
    const yearsRes = await pool.query(
      'SELECT DISTINCT year FROM Assessments_Template WHERE city = $1 ORDER BY year DESC',
      [city]
    );
    const years = yearsRes.rows.map(row => row.year);

    res.render('qldl', {
      user,
      assessments: assessmentsRes.rows,
      years,
      selectedYear: year,
      error: req.query.error || null,
      success: req.query.success || null,
    });
  } catch (err) {
    console.error('L·ªói GET /qldl:', err);
    res.render('qldl', {
      user: req.user,
      assessments: [],
      years: [],
      selectedYear: null,
      error: 'L·ªói khi l·∫•y d·ªØ li·ªáu',
      success: null,
    });
  }
});

app.post('/qldl/delete/:id', authenticateToken, checkRole('admin'), async (req, res) => {
  try {
    const id = req.params.id;
    const oldQuery = await pool.query(
      `
      SELECT a.*, i.code
      FROM Assessments_Template a
      JOIN Indicators i ON a.indicator_id = i.indicator_id
      WHERE a.assessment_id = $1
      `,
      [id]
    );
    if (oldQuery.rows.length === 0) return res.redirect('/qldl?error=Kh√¥ng t√¨m th·∫•y m·ª•c');

    const oldValues = oldQuery.rows[0];
    await pool.query(
      `
      INSERT INTO edit_history (table_name, record_id, old_values, new_values, changed_by, change_type, ip_address, user_agent)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `,
      ['Assessments_Template', id, JSON.stringify(oldValues), JSON.stringify({}), req.user.username, 'delete', req.ip, req.get('User-Agent')]
    );

    await pool.query('DELETE FROM Assessments_Template WHERE assessment_id = $1', [id]);
    res.redirect(`/qldl?success=${encodeURIComponent('X√≥a th√†nh c√¥ng')}`);
  } catch (err) {
    console.error('L·ªói POST /qldl/delete:', err);
    res.redirect(`/qldl?error=${encodeURIComponent('L·ªói khi x√≥a d·ªØ li·ªáu')}`);
  }
});
app.get('/doimatkhau', authenticateToken, async (req, res) => {
  try {
    const viewPath = path.join(__dirname, 'views', 'doimatkhau.ejs');
    const errorViewPath = path.join(__dirname, 'views', 'error.ejs');
    
    // Check if doimatkhau.ejs exists
    try {
      await fs.access(viewPath);
    } catch (err) {
      console.error(`‚ùå T·ªáp doimatkhau.ejs kh√¥ng t·ªìn t·∫°i t·∫°i: ${viewPath}`);
      // Check if error.ejs exists
      try {
        await fs.access(errorViewPath);
        return res.status(500).render('error', {
          user: req.user,
          error: 'Kh√¥ng t√¨m th·∫•y giao di·ªán ƒë·ªïi m·∫≠t kh·∫©u',
          success: null
        });
      } catch (err) {
        console.error(`‚ùå T·ªáp error.ejs kh√¥ng t·ªìn t·∫°i t·∫°i: ${errorViewPath}`);
        return res.status(500).json({
          error: 'Kh√¥ng t√¨m th·∫•y giao di·ªán ƒë·ªïi m·∫≠t kh·∫©u ho·∫∑c trang l·ªói',
          success: null
        });
      }
    }
    
    console.log(`‚úÖ Truy c·∫≠p /doimatkhau, user: ${req.user.username}`);
    res.render('doimatkhau', {
      user: req.user,
      error: req.query.error || null,
      success: req.query.success || null
    });
  } catch (err) {
    console.error('‚ùå L·ªói GET /doimatkhau:', err.message, err.stack);
    try {
      await fs.access(path.join(__dirname, 'views', 'error.ejs'));
      res.status(500).render('error', {
        user: req.user,
        error: 'L·ªói server khi render trang ƒë·ªïi m·∫≠t kh·∫©u',
        success: null
      });
    } catch (err) {
      console.error(`‚ùå T·ªáp error.ejs kh√¥ng t·ªìn t·∫°i t·∫°i: ${path.join(__dirname, 'views', 'error.ejs')}`);
      res.status(500).json({
        error: 'L·ªói server v√† kh√¥ng t√¨m th·∫•y trang l·ªói',
        success: null
      });
    }
  }
});

app.post(
  '/doimatkhau',
  authenticateToken,
  [
    body('oldPassword').trim().notEmpty().withMessage('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
    body('newPassword')
      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/)
      .withMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát'),
    body('confirmPassword')
      .custom((value, { req }) => value === req.body.newPassword)
      .withMessage('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp')
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.warn('‚ö†Ô∏è L·ªói validation /doimatkhau:', errors.array());
      return res.redirect(`/doimatkhau?error=${encodeURIComponent(errors.array()[0].msg)}`);
    }

    const { oldPassword, newPassword } = req.body;
    const username = req.user.username;

    try {
      // Check user
      const result = await pool.query('SELECT password FROM users WHERE username = $1', [username]);
      if (result.rows.length === 0) {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${username}`);
        return res.redirect(`/doimatkhau?error=${encodeURIComponent('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng')}`);
      }

      // Verify old password
      const user = result.rows[0];
      if (!bcrypt.compareSync(oldPassword, user.password)) {
        console.warn(`‚ö†Ô∏è M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng cho ng∆∞·ªùi d√πng: ${username}`);
        return res.redirect(`/doimatkhau?error=${encodeURIComponent('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng')}`);
      }

      // Hash new password
      const hashedNewPassword = await bcrypt.hash(newPassword, 10);

      // Update password
      await pool.query('UPDATE users SET password = $1 WHERE username = $2', [hashedNewPassword, username]);

      // Log to edit_history
      await pool.query(
        `INSERT INTO edit_history (table_name, record_id, old_values, new_values, changed_by, change_type, ip_address, user_agent)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          'users',
          username,
          JSON.stringify({ password: '******' }), // Mask old password
          JSON.stringify({ password: '******' }), // Mask new password
          username,
          'update',
          req.ip,
          req.get('User-Agent')
        ]
      );

      console.log(`‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho ng∆∞·ªùi d√πng: ${username}`);
      res.redirect(`/doimatkhau?success=${encodeURIComponent('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng')}`);
    } catch (err) {
      console.error('‚ùå L·ªói POST /doimatkhau:', err.message, err.stack);
      res.redirect(`/doimatkhau?error=${encodeURIComponent('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u')}`);
    }
  }
);

app.get('/xbtk', authenticateToken, async (req, res) => {
  res.render('xbtk', {
    user: req.user,
    error: req.query.error,
    success: req.query.success,
  });
});

app.post('/upload/pdf-to-word', authenticateToken, checkRole('admin'), upload.single('pdfFile'), async (req, res) => {
  try {
    if (!req.file) {
      return res.redirect('/xbtk?error=Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n');
    }
    const filePath = path.join(uploadDir, req.file.filename);
    await pool.query(
      `
      INSERT INTO file_uploads (filename, original_name, mimetype, size, uploaded_by, file_path)
      VALUES ($1, $2, $3, $4, $5, $6)
      `,
      [req.file.filename, req.file.originalname, req.file.mimetype, req.file.size, req.user.username, filePath]
    );
    res.redirect('/xbtk?success=T·∫£i file l√™n th√†nh c√¥ng');
  } catch (err) {
    console.error('L·ªói POST /upload/pdf-to-word:', err);
    res.redirect('/xbtk?error=L·ªói khi t·∫£i l√™n file');
  }
});

app.get('/export/excel', authenticateToken, async (req, res) => {
  try {
    const year = req.query.year || new Date().getFullYear();
    const assessmentsRes = await pool.query(
      `
      SELECT a.*, d.name AS domain_name, i.name AS indicator_name
      FROM Assessments_Template a
      JOIN Domains d ON a.domain_id = d.domain_id
      JOIN Indicators i ON a.indicator_id = i.indicator_id
      WHERE a.city = $1 AND a.year = $2
      `,
      ['TP. H·ªì Ch√≠ Minh', year]
    );
    const data = assessmentsRes.rows;

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('D·ªØ li·ªáu Climate Smart City');
    worksheet.columns = [
      { header: 'ID', key: 'assessment_id', width: 10 },
      { header: 'NƒÉm', key: 'year', width: 10 },
      { header: 'Lƒ©nh v·ª±c', key: 'domain_name', width: 30 },
      { header: 'Ch·ªâ s·ªë', key: 'indicator_name', width: 30 },
      { header: 'Gi√° tr·ªã', key: 'value', width: 15 },
      { header: 'ƒêi·ªÉm', key: 'score_awarded', width: 10 },
      { header: 'Ng√†y c·∫≠p nh·∫≠t', key: 'date', width: 15 },
    ];
    worksheet.addRows(data);

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename="baocao.xlsx"');
    await workbook.xlsx.write(res);
    res.end();
  } catch (err) {
    console.error('L·ªói xu·∫•t Excel:', err);
    res.redirect('/dashboard?error=L·ªói khi xu·∫•t Excel');
  }
});

app.get('/export/pdf', authenticateToken, async (req, res) => {
  try {
    const year = req.query.year || new Date().getFullYear();
    const assessmentsRes = await pool.query(
      `
      SELECT a.*, d.name AS domain_name, i.name AS indicator_name
      FROM Assessments_Template a
      JOIN Domains d ON a.domain_id = d.domain_id
      JOIN Indicators i ON a.indicator_id = i.indicator_id
      WHERE a.city = $1 AND a.year = $2
      `,
      ['TP. H·ªì Ch√≠ Minh', year]
    );
    const data = assessmentsRes.rows;

    const doc = new PDFDocument({ margin: 50 });
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename="baocao.pdf"');

    doc.pipe(res);
    doc.fontSize(20).text('B√°o c√°o Climate Smart City - TP. H·ªì Ch√≠ Minh', { align: 'center' });
    doc.moveDown();
    doc.fontSize(12).text(`T·∫°o ng√†y: ${new Date().toLocaleString('vi-VN')}`);
    doc.moveDown();

    data.forEach((row, index) => {
      doc.fontSize(14).text(`Ch·ªâ s·ªë: ${row.indicator_name}`, { underline: true });
      doc.fontSize(12).text(`Lƒ©nh v·ª±c: ${row.domain_name}`);
      doc.text(`Gi√° tr·ªã: ${row.value || 'N/A'}`);
      doc.text(`ƒêi·ªÉm: ${row.score_awarded || 'N/A'}`);
      doc.text(`Ng√†y c·∫≠p nh·∫≠t: ${new Date(row.date).toLocaleDateString('vi-VN')}`);
      if (index < data.length - 1) doc.moveDown(2);
    });

    doc.end();
  } catch (err) {
    console.error('L·ªói xu·∫•t PDF:', err);
    res.redirect('/xbtk?error=L·ªói khi xu·∫•t PDF');
  }
});

app.get('/lichsu', authenticateToken, async (req, res) => {
  try {
    const user = req.user;
    const historyRes = await pool.query(
      `
      SELECT id, table_name, record_id, old_values, new_values, changed_by, timestamp
      FROM edit_history
      ORDER BY timestamp DESC
      LIMIT 100
      `
    );
    res.render('lichsu', {
      user,
      history: historyRes.rows,
      error: req.query.error || null,
      success: req.query.success || null,
    });
  } catch (err) {
    console.error('L·ªói GET /lichsu:', err);
    res.render('lichsu', {
      user: req.user,
      history: [],
      error: 'L·ªói khi l·∫•y l·ªãch s·ª≠',
      success: null,
    });
  }
});

app.get('/hsnd', authenticateToken, checkRole('admin'), async (req, res) => {
  try {
    const result = await pool.query('SELECT username, role FROM users');
    const users = result.rows;
    res.render('hsnd', {
      user: req.user,
      users: users,
      error: req.query.error || null,
      success: req.query.success || null,
    });
  } catch (err) {
    console.error('‚ùå L·ªói GET /hsnd:', err.message);
    res.render('hsnd', {
      user: req.user,
      users: [],
      error: 'L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng',
      success: null,
    });
  }
});

app.post(
  '/hsnd/update-role',
  authenticateToken,
  checkRole('admin'),
  [
    body('selectedUser').trim().notEmpty().withMessage('Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng'),
    body('newRole').isIn(['user', 'admin']).withMessage('Vai tr√≤ kh√¥ng h·ª£p l·ªá'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.redirect(`/hsnd?error=${encodeURIComponent(errors.array()[0].msg)}`);
    }
    const { selectedUser, newRole } = req.body;
    try {
      const oldQuery = await pool.query('SELECT username, role FROM users WHERE username = $1', [selectedUser]);
      if (oldQuery.rows.length === 0) {
        return res.redirect(`/hsnd?error=${encodeURIComponent('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng')}`);
      }
      const oldValues = oldQuery.rows[0];
      await pool.query('UPDATE users SET role = $1 WHERE username = $2', [newRole, selectedUser]);
      await pool.query(
        `INSERT INTO edit_history (table_name, record_id, old_values, new_values, changed_by, change_type, ip_address, user_agent)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          'users',
          selectedUser,
          JSON.stringify(oldValues),
          JSON.stringify({ username: selectedUser, role: newRole }),
          req.user.username,
          'update',
          req.ip,
          req.get('User-Agent'),
        ]
      );
      res.redirect(`/hsnd?success=${encodeURIComponent('C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng')}`);
    } catch (err) {
      console.error('‚ùå L·ªói POST /hsnd/update-role:', err.message);
      res.redirect(`/hsnd?error=${encodeURIComponent('L·ªói khi c·∫≠p nh·∫≠t vai tr√≤')}`);
    }
  }
);

app.post('/refresh-token', (req, res) => {
  const token = req.cookies.token;
  if (!token) return res.status(401).json({ error: 'Kh√¥ng c√≥ token' });
  try {
    const user = jwt.verify(token, process.env.JWT_SECRET, { ignoreExpiration: true });
    const newToken = jwt.sign({ username: user.username, role: user.role }, process.env.JWT_SECRET, { expiresIn: '24h' });
    res.cookie('token', newToken, { httpOnly: true, secure: process.env.NODE_ENV === 'production' });
    res.json({ success: 'L√†m m·ªõi token th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói l√†m m·ªõi token:', err.message);
    res.clearCookie('token');
    res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
  }
});

app.get('/logout', (req, res) => {
  res.clearCookie('token');
  res.redirect('/?success=ƒêƒÉng xu·∫•t th√†nh c√¥ng');
});

// Kh·ªüi ƒë·ªông server
(async () => {
  try {
    if (process.env.INIT_DB === 'true') {
      await initializeDatabase();
      console.log('‚úÖ C∆° s·ªü d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.');
    } else {
      console.log('‚è© B·ªè qua kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu.');
    }
    await ensureConstraints();
  } catch (err) {
    console.error('‚ùå L·ªói kh·ªüi ƒë·ªông server:', err);
    process.exit(1);
  }
})();

// Xu·∫•t Express app cho Vercel
module.exports = app;

// N·∫øu ch·∫°y local th√¨ d√πng port 3000
if (require.main === module) {
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`‚úÖ Local server running at http://localhost:${PORT}`);
  });
}
